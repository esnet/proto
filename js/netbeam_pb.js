/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('./google/api/annotations_pb.js');
goog.exportSymbol('proto.esnet.netbeam.v1.AggregationType', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.CollectionId', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.CollectionPath', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.CreateCollectionRequest', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.CreateMetricOutputRequest', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.CreateMetricProcessorRequest', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.CreateMetricRequest', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.CreateOrganizationRequest', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.CurrentArgs', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.Event', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.Metric', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.MetricDescription', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.MetricDescriptionList', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.MetricId', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.MetricIngestEvent', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.MetricList', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.MetricOutput', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.MetricOutputId', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.MetricOutputType', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.MetricPath', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.MetricProcessor', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.MetricProcessorId', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.MetricProcessorType', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.MetricSubscriptionRequest', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.MetricType', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.OrganizationId', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.Percentile', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.RateArgs', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.ResourcePath', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.RollupArgs', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.SubscriptionCommand', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.TileArgs', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.TimeRange', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.TimeSeries', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.TypedValue', null, global);
goog.exportSymbol('proto.esnet.netbeam.v1.Visible', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.TypedValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.esnet.netbeam.v1.TypedValue.oneofGroups_);
};
goog.inherits(proto.esnet.netbeam.v1.TypedValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.TypedValue.displayName = 'proto.esnet.netbeam.v1.TypedValue';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.esnet.netbeam.v1.TypedValue.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.esnet.netbeam.v1.TypedValue.ValueCase = {
  VALUE_NOT_SET: 0,
  BOOL_VALUE: 1,
  INT64_VALUE: 2,
  DOUBLE_VALUE: 3,
  STRING_VALUE: 4
};

/**
 * @return {proto.esnet.netbeam.v1.TypedValue.ValueCase}
 */
proto.esnet.netbeam.v1.TypedValue.prototype.getValueCase = function() {
  return /** @type {proto.esnet.netbeam.v1.TypedValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.esnet.netbeam.v1.TypedValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.TypedValue.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.TypedValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.TypedValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.TypedValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    boolValue: jspb.Message.getFieldWithDefault(msg, 1, false),
    int64Value: jspb.Message.getFieldWithDefault(msg, 2, 0),
    doubleValue: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    stringValue: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.TypedValue}
 */
proto.esnet.netbeam.v1.TypedValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.TypedValue;
  return proto.esnet.netbeam.v1.TypedValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.TypedValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.TypedValue}
 */
proto.esnet.netbeam.v1.TypedValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInt64Value(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoubleValue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.TypedValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.TypedValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.TypedValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.TypedValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bool bool_value = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.esnet.netbeam.v1.TypedValue.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.esnet.netbeam.v1.TypedValue.prototype.setBoolValue = function(value) {
  jspb.Message.setOneofField(this, 1, proto.esnet.netbeam.v1.TypedValue.oneofGroups_[0], value);
};


proto.esnet.netbeam.v1.TypedValue.prototype.clearBoolValue = function() {
  jspb.Message.setOneofField(this, 1, proto.esnet.netbeam.v1.TypedValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.esnet.netbeam.v1.TypedValue.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 int64_value = 2;
 * @return {number}
 */
proto.esnet.netbeam.v1.TypedValue.prototype.getInt64Value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.esnet.netbeam.v1.TypedValue.prototype.setInt64Value = function(value) {
  jspb.Message.setOneofField(this, 2, proto.esnet.netbeam.v1.TypedValue.oneofGroups_[0], value);
};


proto.esnet.netbeam.v1.TypedValue.prototype.clearInt64Value = function() {
  jspb.Message.setOneofField(this, 2, proto.esnet.netbeam.v1.TypedValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.esnet.netbeam.v1.TypedValue.prototype.hasInt64Value = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double double_value = 3;
 * @return {number}
 */
proto.esnet.netbeam.v1.TypedValue.prototype.getDoubleValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.esnet.netbeam.v1.TypedValue.prototype.setDoubleValue = function(value) {
  jspb.Message.setOneofField(this, 3, proto.esnet.netbeam.v1.TypedValue.oneofGroups_[0], value);
};


proto.esnet.netbeam.v1.TypedValue.prototype.clearDoubleValue = function() {
  jspb.Message.setOneofField(this, 3, proto.esnet.netbeam.v1.TypedValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.esnet.netbeam.v1.TypedValue.prototype.hasDoubleValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string string_value = 4;
 * @return {string}
 */
proto.esnet.netbeam.v1.TypedValue.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.TypedValue.prototype.setStringValue = function(value) {
  jspb.Message.setOneofField(this, 4, proto.esnet.netbeam.v1.TypedValue.oneofGroups_[0], value);
};


proto.esnet.netbeam.v1.TypedValue.prototype.clearStringValue = function() {
  jspb.Message.setOneofField(this, 4, proto.esnet.netbeam.v1.TypedValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.esnet.netbeam.v1.TypedValue.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.ResourcePath = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.esnet.netbeam.v1.ResourcePath.repeatedFields_, null);
};
goog.inherits(proto.esnet.netbeam.v1.ResourcePath, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.ResourcePath.displayName = 'proto.esnet.netbeam.v1.ResourcePath';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.esnet.netbeam.v1.ResourcePath.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.ResourcePath.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.ResourcePath.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.ResourcePath} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.ResourcePath.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespaceList: jspb.Message.getRepeatedField(msg, 1),
    resourceList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.ResourcePath}
 */
proto.esnet.netbeam.v1.ResourcePath.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.ResourcePath;
  return proto.esnet.netbeam.v1.ResourcePath.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.ResourcePath} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.ResourcePath}
 */
proto.esnet.netbeam.v1.ResourcePath.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addResource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.ResourcePath.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.ResourcePath.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.ResourcePath} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.ResourcePath.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespaceList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getResourceList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string namespace = 1;
 * @return {!Array.<string>}
 */
proto.esnet.netbeam.v1.ResourcePath.prototype.getNamespaceList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.esnet.netbeam.v1.ResourcePath.prototype.setNamespaceList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.esnet.netbeam.v1.ResourcePath.prototype.addNamespace = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.esnet.netbeam.v1.ResourcePath.prototype.clearNamespaceList = function() {
  this.setNamespaceList([]);
};


/**
 * repeated string resource = 2;
 * @return {!Array.<string>}
 */
proto.esnet.netbeam.v1.ResourcePath.prototype.getResourceList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<string>} value */
proto.esnet.netbeam.v1.ResourcePath.prototype.setResourceList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.esnet.netbeam.v1.ResourcePath.prototype.addResource = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.esnet.netbeam.v1.ResourcePath.prototype.clearResourceList = function() {
  this.setResourceList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.MetricIngestEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.esnet.netbeam.v1.MetricIngestEvent.repeatedFields_, null);
};
goog.inherits(proto.esnet.netbeam.v1.MetricIngestEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.MetricIngestEvent.displayName = 'proto.esnet.netbeam.v1.MetricIngestEvent';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.esnet.netbeam.v1.MetricIngestEvent.repeatedFields_ = [1,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.MetricIngestEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.MetricIngestEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.MetricIngestEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.MetricIngestEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourcepathList: jspb.Message.getRepeatedField(msg, 1),
    metricpath: (f = msg.getMetricpath()) && proto.esnet.netbeam.v1.MetricPath.toObject(includeInstance, f),
    timestamp: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    value: (f = msg.getValue()) && proto.esnet.netbeam.v1.TypedValue.toObject(includeInstance, f),
    tagsList: jspb.Message.getRepeatedField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.MetricIngestEvent}
 */
proto.esnet.netbeam.v1.MetricIngestEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.MetricIngestEvent;
  return proto.esnet.netbeam.v1.MetricIngestEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.MetricIngestEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.MetricIngestEvent}
 */
proto.esnet.netbeam.v1.MetricIngestEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addResourcepath(value);
      break;
    case 2:
      var value = new proto.esnet.netbeam.v1.MetricPath;
      reader.readMessage(value,proto.esnet.netbeam.v1.MetricPath.deserializeBinaryFromReader);
      msg.setMetricpath(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = new proto.esnet.netbeam.v1.TypedValue;
      reader.readMessage(value,proto.esnet.netbeam.v1.TypedValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.MetricIngestEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.MetricIngestEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.MetricIngestEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.MetricIngestEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourcepathList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getMetricpath();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.esnet.netbeam.v1.MetricPath.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.esnet.netbeam.v1.TypedValue.serializeBinaryToWriter
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * repeated string resourcePath = 1;
 * @return {!Array.<string>}
 */
proto.esnet.netbeam.v1.MetricIngestEvent.prototype.getResourcepathList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.esnet.netbeam.v1.MetricIngestEvent.prototype.setResourcepathList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.esnet.netbeam.v1.MetricIngestEvent.prototype.addResourcepath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.esnet.netbeam.v1.MetricIngestEvent.prototype.clearResourcepathList = function() {
  this.setResourcepathList([]);
};


/**
 * optional MetricPath metricPath = 2;
 * @return {?proto.esnet.netbeam.v1.MetricPath}
 */
proto.esnet.netbeam.v1.MetricIngestEvent.prototype.getMetricpath = function() {
  return /** @type{?proto.esnet.netbeam.v1.MetricPath} */ (
    jspb.Message.getWrapperField(this, proto.esnet.netbeam.v1.MetricPath, 2));
};


/** @param {?proto.esnet.netbeam.v1.MetricPath|undefined} value */
proto.esnet.netbeam.v1.MetricIngestEvent.prototype.setMetricpath = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.esnet.netbeam.v1.MetricIngestEvent.prototype.clearMetricpath = function() {
  this.setMetricpath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.esnet.netbeam.v1.MetricIngestEvent.prototype.hasMetricpath = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double timestamp = 3;
 * @return {number}
 */
proto.esnet.netbeam.v1.MetricIngestEvent.prototype.getTimestamp = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.esnet.netbeam.v1.MetricIngestEvent.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional TypedValue value = 4;
 * @return {?proto.esnet.netbeam.v1.TypedValue}
 */
proto.esnet.netbeam.v1.MetricIngestEvent.prototype.getValue = function() {
  return /** @type{?proto.esnet.netbeam.v1.TypedValue} */ (
    jspb.Message.getWrapperField(this, proto.esnet.netbeam.v1.TypedValue, 4));
};


/** @param {?proto.esnet.netbeam.v1.TypedValue|undefined} value */
proto.esnet.netbeam.v1.MetricIngestEvent.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.esnet.netbeam.v1.MetricIngestEvent.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.esnet.netbeam.v1.MetricIngestEvent.prototype.hasValue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string tags = 5;
 * @return {!Array.<string>}
 */
proto.esnet.netbeam.v1.MetricIngestEvent.prototype.getTagsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<string>} value */
proto.esnet.netbeam.v1.MetricIngestEvent.prototype.setTagsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.esnet.netbeam.v1.MetricIngestEvent.prototype.addTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.esnet.netbeam.v1.MetricIngestEvent.prototype.clearTagsList = function() {
  this.setTagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.TimeRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.esnet.netbeam.v1.TimeRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.TimeRange.displayName = 'proto.esnet.netbeam.v1.TimeRange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.TimeRange.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.TimeRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.TimeRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.TimeRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    begin: jspb.Message.getFieldWithDefault(msg, 1, 0),
    end: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.TimeRange}
 */
proto.esnet.netbeam.v1.TimeRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.TimeRange;
  return proto.esnet.netbeam.v1.TimeRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.TimeRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.TimeRange}
 */
proto.esnet.netbeam.v1.TimeRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBegin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.TimeRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.TimeRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.TimeRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.TimeRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBegin();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getEnd();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 begin = 1;
 * @return {number}
 */
proto.esnet.netbeam.v1.TimeRange.prototype.getBegin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.esnet.netbeam.v1.TimeRange.prototype.setBegin = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 end = 2;
 * @return {number}
 */
proto.esnet.netbeam.v1.TimeRange.prototype.getEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.esnet.netbeam.v1.TimeRange.prototype.setEnd = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.esnet.netbeam.v1.Event.repeatedFields_, null);
};
goog.inherits(proto.esnet.netbeam.v1.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.Event.displayName = 'proto.esnet.netbeam.v1.Event';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.esnet.netbeam.v1.Event.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.esnet.netbeam.v1.TypedValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.Event}
 */
proto.esnet.netbeam.v1.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.Event;
  return proto.esnet.netbeam.v1.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.Event}
 */
proto.esnet.netbeam.v1.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = new proto.esnet.netbeam.v1.TypedValue;
      reader.readMessage(value,proto.esnet.netbeam.v1.TypedValue.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.esnet.netbeam.v1.TypedValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.esnet.netbeam.v1.Event.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.esnet.netbeam.v1.Event.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated TypedValue values = 2;
 * @return {!Array.<!proto.esnet.netbeam.v1.TypedValue>}
 */
proto.esnet.netbeam.v1.Event.prototype.getValuesList = function() {
  return /** @type{!Array.<!proto.esnet.netbeam.v1.TypedValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.esnet.netbeam.v1.TypedValue, 2));
};


/** @param {!Array.<!proto.esnet.netbeam.v1.TypedValue>} value */
proto.esnet.netbeam.v1.Event.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.esnet.netbeam.v1.TypedValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.esnet.netbeam.v1.TypedValue}
 */
proto.esnet.netbeam.v1.Event.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.esnet.netbeam.v1.TypedValue, opt_index);
};


proto.esnet.netbeam.v1.Event.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.Percentile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.esnet.netbeam.v1.Percentile.repeatedFields_, null);
};
goog.inherits(proto.esnet.netbeam.v1.Percentile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.Percentile.displayName = 'proto.esnet.netbeam.v1.Percentile';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.esnet.netbeam.v1.Percentile.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.Percentile.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.Percentile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.Percentile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.Percentile.toObject = function(includeInstance, msg) {
  var f, obj = {
    percentile: jspb.Message.getFieldWithDefault(msg, 1, 0),
    valuesList: jspb.Message.getRepeatedFloatingPointField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.Percentile}
 */
proto.esnet.netbeam.v1.Percentile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.Percentile;
  return proto.esnet.netbeam.v1.Percentile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.Percentile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.Percentile}
 */
proto.esnet.netbeam.v1.Percentile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPercentile(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.Percentile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.Percentile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.Percentile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.Percentile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPercentile();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      2,
      f
    );
  }
};


/**
 * optional int32 percentile = 1;
 * @return {number}
 */
proto.esnet.netbeam.v1.Percentile.prototype.getPercentile = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.esnet.netbeam.v1.Percentile.prototype.setPercentile = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated double values = 2;
 * @return {!Array.<number>}
 */
proto.esnet.netbeam.v1.Percentile.prototype.getValuesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/** @param {!Array.<number>} value */
proto.esnet.netbeam.v1.Percentile.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.esnet.netbeam.v1.Percentile.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.esnet.netbeam.v1.Percentile.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.TimeSeries = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.esnet.netbeam.v1.TimeSeries.repeatedFields_, null);
};
goog.inherits(proto.esnet.netbeam.v1.TimeSeries, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.TimeSeries.displayName = 'proto.esnet.netbeam.v1.TimeSeries';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.esnet.netbeam.v1.TimeSeries.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.TimeSeries.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.TimeSeries.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.TimeSeries} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.TimeSeries.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    columnsList: jspb.Message.getRepeatedField(msg, 2),
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    proto.esnet.netbeam.v1.Event.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.TimeSeries}
 */
proto.esnet.netbeam.v1.TimeSeries.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.TimeSeries;
  return proto.esnet.netbeam.v1.TimeSeries.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.TimeSeries} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.TimeSeries}
 */
proto.esnet.netbeam.v1.TimeSeries.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addColumns(value);
      break;
    case 3:
      var value = new proto.esnet.netbeam.v1.Event;
      reader.readMessage(value,proto.esnet.netbeam.v1.Event.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.TimeSeries.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.TimeSeries.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.TimeSeries} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.TimeSeries.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.esnet.netbeam.v1.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.esnet.netbeam.v1.TimeSeries.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.TimeSeries.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string columns = 2;
 * @return {!Array.<string>}
 */
proto.esnet.netbeam.v1.TimeSeries.prototype.getColumnsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<string>} value */
proto.esnet.netbeam.v1.TimeSeries.prototype.setColumnsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.esnet.netbeam.v1.TimeSeries.prototype.addColumns = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.esnet.netbeam.v1.TimeSeries.prototype.clearColumnsList = function() {
  this.setColumnsList([]);
};


/**
 * repeated Event points = 3;
 * @return {!Array.<!proto.esnet.netbeam.v1.Event>}
 */
proto.esnet.netbeam.v1.TimeSeries.prototype.getPointsList = function() {
  return /** @type{!Array.<!proto.esnet.netbeam.v1.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.esnet.netbeam.v1.Event, 3));
};


/** @param {!Array.<!proto.esnet.netbeam.v1.Event>} value */
proto.esnet.netbeam.v1.TimeSeries.prototype.setPointsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.esnet.netbeam.v1.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.esnet.netbeam.v1.Event}
 */
proto.esnet.netbeam.v1.TimeSeries.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.esnet.netbeam.v1.Event, opt_index);
};


proto.esnet.netbeam.v1.TimeSeries.prototype.clearPointsList = function() {
  this.setPointsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.MetricSubscriptionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.esnet.netbeam.v1.MetricSubscriptionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.MetricSubscriptionRequest.displayName = 'proto.esnet.netbeam.v1.MetricSubscriptionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.MetricSubscriptionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.MetricSubscriptionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.MetricSubscriptionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.MetricSubscriptionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cmd: jspb.Message.getFieldWithDefault(msg, 1, 0),
    path: (f = msg.getPath()) && proto.esnet.netbeam.v1.MetricPath.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.MetricSubscriptionRequest}
 */
proto.esnet.netbeam.v1.MetricSubscriptionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.MetricSubscriptionRequest;
  return proto.esnet.netbeam.v1.MetricSubscriptionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.MetricSubscriptionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.MetricSubscriptionRequest}
 */
proto.esnet.netbeam.v1.MetricSubscriptionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.esnet.netbeam.v1.SubscriptionCommand} */ (reader.readEnum());
      msg.setCmd(value);
      break;
    case 2:
      var value = new proto.esnet.netbeam.v1.MetricPath;
      reader.readMessage(value,proto.esnet.netbeam.v1.MetricPath.deserializeBinaryFromReader);
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.MetricSubscriptionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.MetricSubscriptionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.MetricSubscriptionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.MetricSubscriptionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCmd();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPath();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.esnet.netbeam.v1.MetricPath.serializeBinaryToWriter
    );
  }
};


/**
 * optional SubscriptionCommand cmd = 1;
 * @return {!proto.esnet.netbeam.v1.SubscriptionCommand}
 */
proto.esnet.netbeam.v1.MetricSubscriptionRequest.prototype.getCmd = function() {
  return /** @type {!proto.esnet.netbeam.v1.SubscriptionCommand} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.esnet.netbeam.v1.SubscriptionCommand} value */
proto.esnet.netbeam.v1.MetricSubscriptionRequest.prototype.setCmd = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional MetricPath path = 2;
 * @return {?proto.esnet.netbeam.v1.MetricPath}
 */
proto.esnet.netbeam.v1.MetricSubscriptionRequest.prototype.getPath = function() {
  return /** @type{?proto.esnet.netbeam.v1.MetricPath} */ (
    jspb.Message.getWrapperField(this, proto.esnet.netbeam.v1.MetricPath, 2));
};


/** @param {?proto.esnet.netbeam.v1.MetricPath|undefined} value */
proto.esnet.netbeam.v1.MetricSubscriptionRequest.prototype.setPath = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.esnet.netbeam.v1.MetricSubscriptionRequest.prototype.clearPath = function() {
  this.setPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.esnet.netbeam.v1.MetricSubscriptionRequest.prototype.hasPath = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.RollupArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.esnet.netbeam.v1.RollupArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.RollupArgs.displayName = 'proto.esnet.netbeam.v1.RollupArgs';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.RollupArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.RollupArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.RollupArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.RollupArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_function: jspb.Message.getFieldWithDefault(msg, 1, 0),
    window: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.RollupArgs}
 */
proto.esnet.netbeam.v1.RollupArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.RollupArgs;
  return proto.esnet.netbeam.v1.RollupArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.RollupArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.RollupArgs}
 */
proto.esnet.netbeam.v1.RollupArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.esnet.netbeam.v1.AggregationType} */ (reader.readEnum());
      msg.setFunction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWindow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.RollupArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.RollupArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.RollupArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.RollupArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunction();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getWindow();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional AggregationType function = 1;
 * @return {!proto.esnet.netbeam.v1.AggregationType}
 */
proto.esnet.netbeam.v1.RollupArgs.prototype.getFunction = function() {
  return /** @type {!proto.esnet.netbeam.v1.AggregationType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.esnet.netbeam.v1.AggregationType} value */
proto.esnet.netbeam.v1.RollupArgs.prototype.setFunction = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string window = 2;
 * @return {string}
 */
proto.esnet.netbeam.v1.RollupArgs.prototype.getWindow = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.RollupArgs.prototype.setWindow = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.RateArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.esnet.netbeam.v1.RateArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.RateArgs.displayName = 'proto.esnet.netbeam.v1.RateArgs';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.RateArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.RateArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.RateArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.RateArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    allownegative: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.RateArgs}
 */
proto.esnet.netbeam.v1.RateArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.RateArgs;
  return proto.esnet.netbeam.v1.RateArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.RateArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.RateArgs}
 */
proto.esnet.netbeam.v1.RateArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllownegative(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.RateArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.RateArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.RateArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.RateArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAllownegative();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool allowNegative = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.esnet.netbeam.v1.RateArgs.prototype.getAllownegative = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.esnet.netbeam.v1.RateArgs.prototype.setAllownegative = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.MetricProcessor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.esnet.netbeam.v1.MetricProcessor.oneofGroups_);
};
goog.inherits(proto.esnet.netbeam.v1.MetricProcessor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.MetricProcessor.displayName = 'proto.esnet.netbeam.v1.MetricProcessor';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.esnet.netbeam.v1.MetricProcessor.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.esnet.netbeam.v1.MetricProcessor.ArgsCase = {
  ARGS_NOT_SET: 0,
  ROLLUP_ARGS: 2,
  RATE_ARGS: 3
};

/**
 * @return {proto.esnet.netbeam.v1.MetricProcessor.ArgsCase}
 */
proto.esnet.netbeam.v1.MetricProcessor.prototype.getArgsCase = function() {
  return /** @type {proto.esnet.netbeam.v1.MetricProcessor.ArgsCase} */(jspb.Message.computeOneofCase(this, proto.esnet.netbeam.v1.MetricProcessor.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.MetricProcessor.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.MetricProcessor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.MetricProcessor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.MetricProcessor.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rollupArgs: (f = msg.getRollupArgs()) && proto.esnet.netbeam.v1.RollupArgs.toObject(includeInstance, f),
    rateArgs: (f = msg.getRateArgs()) && proto.esnet.netbeam.v1.RateArgs.toObject(includeInstance, f),
    metric: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.MetricProcessor}
 */
proto.esnet.netbeam.v1.MetricProcessor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.MetricProcessor;
  return proto.esnet.netbeam.v1.MetricProcessor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.MetricProcessor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.MetricProcessor}
 */
proto.esnet.netbeam.v1.MetricProcessor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.esnet.netbeam.v1.MetricProcessorType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.esnet.netbeam.v1.RollupArgs;
      reader.readMessage(value,proto.esnet.netbeam.v1.RollupArgs.deserializeBinaryFromReader);
      msg.setRollupArgs(value);
      break;
    case 3:
      var value = new proto.esnet.netbeam.v1.RateArgs;
      reader.readMessage(value,proto.esnet.netbeam.v1.RateArgs.deserializeBinaryFromReader);
      msg.setRateArgs(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetric(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.MetricProcessor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.MetricProcessor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.MetricProcessor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.MetricProcessor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRollupArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.esnet.netbeam.v1.RollupArgs.serializeBinaryToWriter
    );
  }
  f = message.getRateArgs();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.esnet.netbeam.v1.RateArgs.serializeBinaryToWriter
    );
  }
  f = message.getMetric();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional MetricProcessorType type = 1;
 * @return {!proto.esnet.netbeam.v1.MetricProcessorType}
 */
proto.esnet.netbeam.v1.MetricProcessor.prototype.getType = function() {
  return /** @type {!proto.esnet.netbeam.v1.MetricProcessorType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.esnet.netbeam.v1.MetricProcessorType} value */
proto.esnet.netbeam.v1.MetricProcessor.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional RollupArgs rollup_args = 2;
 * @return {?proto.esnet.netbeam.v1.RollupArgs}
 */
proto.esnet.netbeam.v1.MetricProcessor.prototype.getRollupArgs = function() {
  return /** @type{?proto.esnet.netbeam.v1.RollupArgs} */ (
    jspb.Message.getWrapperField(this, proto.esnet.netbeam.v1.RollupArgs, 2));
};


/** @param {?proto.esnet.netbeam.v1.RollupArgs|undefined} value */
proto.esnet.netbeam.v1.MetricProcessor.prototype.setRollupArgs = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.esnet.netbeam.v1.MetricProcessor.oneofGroups_[0], value);
};


proto.esnet.netbeam.v1.MetricProcessor.prototype.clearRollupArgs = function() {
  this.setRollupArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.esnet.netbeam.v1.MetricProcessor.prototype.hasRollupArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RateArgs rate_args = 3;
 * @return {?proto.esnet.netbeam.v1.RateArgs}
 */
proto.esnet.netbeam.v1.MetricProcessor.prototype.getRateArgs = function() {
  return /** @type{?proto.esnet.netbeam.v1.RateArgs} */ (
    jspb.Message.getWrapperField(this, proto.esnet.netbeam.v1.RateArgs, 3));
};


/** @param {?proto.esnet.netbeam.v1.RateArgs|undefined} value */
proto.esnet.netbeam.v1.MetricProcessor.prototype.setRateArgs = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.esnet.netbeam.v1.MetricProcessor.oneofGroups_[0], value);
};


proto.esnet.netbeam.v1.MetricProcessor.prototype.clearRateArgs = function() {
  this.setRateArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.esnet.netbeam.v1.MetricProcessor.prototype.hasRateArgs = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string metric = 4;
 * @return {string}
 */
proto.esnet.netbeam.v1.MetricProcessor.prototype.getMetric = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.MetricProcessor.prototype.setMetric = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.TileArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.esnet.netbeam.v1.TileArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.TileArgs.displayName = 'proto.esnet.netbeam.v1.TileArgs';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.TileArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.TileArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.TileArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.TileArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    span: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.TileArgs}
 */
proto.esnet.netbeam.v1.TileArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.TileArgs;
  return proto.esnet.netbeam.v1.TileArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.TileArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.TileArgs}
 */
proto.esnet.netbeam.v1.TileArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.TileArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.TileArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.TileArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.TileArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpan();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string span = 1;
 * @return {string}
 */
proto.esnet.netbeam.v1.TileArgs.prototype.getSpan = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.TileArgs.prototype.setSpan = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.CurrentArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.esnet.netbeam.v1.CurrentArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.CurrentArgs.displayName = 'proto.esnet.netbeam.v1.CurrentArgs';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.CurrentArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.CurrentArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.CurrentArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.CurrentArgs.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.CurrentArgs}
 */
proto.esnet.netbeam.v1.CurrentArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.CurrentArgs;
  return proto.esnet.netbeam.v1.CurrentArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.CurrentArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.CurrentArgs}
 */
proto.esnet.netbeam.v1.CurrentArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.CurrentArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.CurrentArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.CurrentArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.CurrentArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.MetricOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.esnet.netbeam.v1.MetricOutput.oneofGroups_);
};
goog.inherits(proto.esnet.netbeam.v1.MetricOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.MetricOutput.displayName = 'proto.esnet.netbeam.v1.MetricOutput';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.esnet.netbeam.v1.MetricOutput.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.esnet.netbeam.v1.MetricOutput.ArgsCase = {
  ARGS_NOT_SET: 0,
  TILE_ARGS: 2,
  CURRENT_ARGS: 3,
  ROLLING_ARGS: 4
};

/**
 * @return {proto.esnet.netbeam.v1.MetricOutput.ArgsCase}
 */
proto.esnet.netbeam.v1.MetricOutput.prototype.getArgsCase = function() {
  return /** @type {proto.esnet.netbeam.v1.MetricOutput.ArgsCase} */(jspb.Message.computeOneofCase(this, proto.esnet.netbeam.v1.MetricOutput.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.MetricOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.MetricOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.MetricOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.MetricOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tileArgs: (f = msg.getTileArgs()) && proto.esnet.netbeam.v1.TileArgs.toObject(includeInstance, f),
    currentArgs: (f = msg.getCurrentArgs()) && proto.esnet.netbeam.v1.CurrentArgs.toObject(includeInstance, f),
    rollingArgs: (f = msg.getRollingArgs()) && proto.esnet.netbeam.v1.RollupArgs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.MetricOutput}
 */
proto.esnet.netbeam.v1.MetricOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.MetricOutput;
  return proto.esnet.netbeam.v1.MetricOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.MetricOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.MetricOutput}
 */
proto.esnet.netbeam.v1.MetricOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.esnet.netbeam.v1.MetricOutputType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.esnet.netbeam.v1.TileArgs;
      reader.readMessage(value,proto.esnet.netbeam.v1.TileArgs.deserializeBinaryFromReader);
      msg.setTileArgs(value);
      break;
    case 3:
      var value = new proto.esnet.netbeam.v1.CurrentArgs;
      reader.readMessage(value,proto.esnet.netbeam.v1.CurrentArgs.deserializeBinaryFromReader);
      msg.setCurrentArgs(value);
      break;
    case 4:
      var value = new proto.esnet.netbeam.v1.RollupArgs;
      reader.readMessage(value,proto.esnet.netbeam.v1.RollupArgs.deserializeBinaryFromReader);
      msg.setRollingArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.MetricOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.MetricOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.MetricOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.MetricOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTileArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.esnet.netbeam.v1.TileArgs.serializeBinaryToWriter
    );
  }
  f = message.getCurrentArgs();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.esnet.netbeam.v1.CurrentArgs.serializeBinaryToWriter
    );
  }
  f = message.getRollingArgs();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.esnet.netbeam.v1.RollupArgs.serializeBinaryToWriter
    );
  }
};


/**
 * optional MetricOutputType type = 1;
 * @return {!proto.esnet.netbeam.v1.MetricOutputType}
 */
proto.esnet.netbeam.v1.MetricOutput.prototype.getType = function() {
  return /** @type {!proto.esnet.netbeam.v1.MetricOutputType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.esnet.netbeam.v1.MetricOutputType} value */
proto.esnet.netbeam.v1.MetricOutput.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional TileArgs tile_args = 2;
 * @return {?proto.esnet.netbeam.v1.TileArgs}
 */
proto.esnet.netbeam.v1.MetricOutput.prototype.getTileArgs = function() {
  return /** @type{?proto.esnet.netbeam.v1.TileArgs} */ (
    jspb.Message.getWrapperField(this, proto.esnet.netbeam.v1.TileArgs, 2));
};


/** @param {?proto.esnet.netbeam.v1.TileArgs|undefined} value */
proto.esnet.netbeam.v1.MetricOutput.prototype.setTileArgs = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.esnet.netbeam.v1.MetricOutput.oneofGroups_[0], value);
};


proto.esnet.netbeam.v1.MetricOutput.prototype.clearTileArgs = function() {
  this.setTileArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.esnet.netbeam.v1.MetricOutput.prototype.hasTileArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CurrentArgs current_args = 3;
 * @return {?proto.esnet.netbeam.v1.CurrentArgs}
 */
proto.esnet.netbeam.v1.MetricOutput.prototype.getCurrentArgs = function() {
  return /** @type{?proto.esnet.netbeam.v1.CurrentArgs} */ (
    jspb.Message.getWrapperField(this, proto.esnet.netbeam.v1.CurrentArgs, 3));
};


/** @param {?proto.esnet.netbeam.v1.CurrentArgs|undefined} value */
proto.esnet.netbeam.v1.MetricOutput.prototype.setCurrentArgs = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.esnet.netbeam.v1.MetricOutput.oneofGroups_[0], value);
};


proto.esnet.netbeam.v1.MetricOutput.prototype.clearCurrentArgs = function() {
  this.setCurrentArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.esnet.netbeam.v1.MetricOutput.prototype.hasCurrentArgs = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RollupArgs rolling_args = 4;
 * @return {?proto.esnet.netbeam.v1.RollupArgs}
 */
proto.esnet.netbeam.v1.MetricOutput.prototype.getRollingArgs = function() {
  return /** @type{?proto.esnet.netbeam.v1.RollupArgs} */ (
    jspb.Message.getWrapperField(this, proto.esnet.netbeam.v1.RollupArgs, 4));
};


/** @param {?proto.esnet.netbeam.v1.RollupArgs|undefined} value */
proto.esnet.netbeam.v1.MetricOutput.prototype.setRollingArgs = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.esnet.netbeam.v1.MetricOutput.oneofGroups_[0], value);
};


proto.esnet.netbeam.v1.MetricOutput.prototype.clearRollingArgs = function() {
  this.setRollingArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.esnet.netbeam.v1.MetricOutput.prototype.hasRollingArgs = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.MetricDescription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.esnet.netbeam.v1.MetricDescription.repeatedFields_, null);
};
goog.inherits(proto.esnet.netbeam.v1.MetricDescription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.MetricDescription.displayName = 'proto.esnet.netbeam.v1.MetricDescription';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.esnet.netbeam.v1.MetricDescription.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.MetricDescription.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.MetricDescription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.MetricDescription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.MetricDescription.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    units: jspb.Message.getFieldWithDefault(msg, 3, ""),
    scopesList: jspb.Message.getRepeatedField(msg, 4),
    align: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.MetricDescription}
 */
proto.esnet.netbeam.v1.MetricDescription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.MetricDescription;
  return proto.esnet.netbeam.v1.MetricDescription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.MetricDescription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.MetricDescription}
 */
proto.esnet.netbeam.v1.MetricDescription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.esnet.netbeam.v1.MetricType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnits(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addScopes(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlign(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.MetricDescription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.MetricDescription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.MetricDescription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.MetricDescription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnits();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getScopesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getAlign();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional MetricType type = 1;
 * @return {!proto.esnet.netbeam.v1.MetricType}
 */
proto.esnet.netbeam.v1.MetricDescription.prototype.getType = function() {
  return /** @type {!proto.esnet.netbeam.v1.MetricType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.esnet.netbeam.v1.MetricType} value */
proto.esnet.netbeam.v1.MetricDescription.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.esnet.netbeam.v1.MetricDescription.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.MetricDescription.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string units = 3;
 * @return {string}
 */
proto.esnet.netbeam.v1.MetricDescription.prototype.getUnits = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.MetricDescription.prototype.setUnits = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string scopes = 4;
 * @return {!Array.<string>}
 */
proto.esnet.netbeam.v1.MetricDescription.prototype.getScopesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<string>} value */
proto.esnet.netbeam.v1.MetricDescription.prototype.setScopesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.esnet.netbeam.v1.MetricDescription.prototype.addScopes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.esnet.netbeam.v1.MetricDescription.prototype.clearScopesList = function() {
  this.setScopesList([]);
};


/**
 * optional string align = 5;
 * @return {string}
 */
proto.esnet.netbeam.v1.MetricDescription.prototype.getAlign = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.MetricDescription.prototype.setAlign = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.Metric = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.esnet.netbeam.v1.Metric.repeatedFields_, null);
};
goog.inherits(proto.esnet.netbeam.v1.Metric, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.Metric.displayName = 'proto.esnet.netbeam.v1.Metric';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.esnet.netbeam.v1.Metric.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.Metric.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.Metric.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.Metric} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.Metric.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: (f = msg.getPath()) && proto.esnet.netbeam.v1.MetricPath.toObject(includeInstance, f),
    description: (f = msg.getDescription()) && proto.esnet.netbeam.v1.MetricDescription.toObject(includeInstance, f),
    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),
    proto.esnet.netbeam.v1.MetricOutput.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.Metric}
 */
proto.esnet.netbeam.v1.Metric.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.Metric;
  return proto.esnet.netbeam.v1.Metric.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.Metric} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.Metric}
 */
proto.esnet.netbeam.v1.Metric.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.esnet.netbeam.v1.MetricPath;
      reader.readMessage(value,proto.esnet.netbeam.v1.MetricPath.deserializeBinaryFromReader);
      msg.setPath(value);
      break;
    case 2:
      var value = new proto.esnet.netbeam.v1.MetricDescription;
      reader.readMessage(value,proto.esnet.netbeam.v1.MetricDescription.deserializeBinaryFromReader);
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.esnet.netbeam.v1.MetricOutput;
      reader.readMessage(value,proto.esnet.netbeam.v1.MetricOutput.deserializeBinaryFromReader);
      msg.addOutputs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.Metric.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.Metric.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.Metric} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.Metric.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.esnet.netbeam.v1.MetricPath.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.esnet.netbeam.v1.MetricDescription.serializeBinaryToWriter
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.esnet.netbeam.v1.MetricOutput.serializeBinaryToWriter
    );
  }
};


/**
 * optional MetricPath path = 1;
 * @return {?proto.esnet.netbeam.v1.MetricPath}
 */
proto.esnet.netbeam.v1.Metric.prototype.getPath = function() {
  return /** @type{?proto.esnet.netbeam.v1.MetricPath} */ (
    jspb.Message.getWrapperField(this, proto.esnet.netbeam.v1.MetricPath, 1));
};


/** @param {?proto.esnet.netbeam.v1.MetricPath|undefined} value */
proto.esnet.netbeam.v1.Metric.prototype.setPath = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.esnet.netbeam.v1.Metric.prototype.clearPath = function() {
  this.setPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.esnet.netbeam.v1.Metric.prototype.hasPath = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MetricDescription description = 2;
 * @return {?proto.esnet.netbeam.v1.MetricDescription}
 */
proto.esnet.netbeam.v1.Metric.prototype.getDescription = function() {
  return /** @type{?proto.esnet.netbeam.v1.MetricDescription} */ (
    jspb.Message.getWrapperField(this, proto.esnet.netbeam.v1.MetricDescription, 2));
};


/** @param {?proto.esnet.netbeam.v1.MetricDescription|undefined} value */
proto.esnet.netbeam.v1.Metric.prototype.setDescription = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.esnet.netbeam.v1.Metric.prototype.clearDescription = function() {
  this.setDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.esnet.netbeam.v1.Metric.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated MetricOutput outputs = 3;
 * @return {!Array.<!proto.esnet.netbeam.v1.MetricOutput>}
 */
proto.esnet.netbeam.v1.Metric.prototype.getOutputsList = function() {
  return /** @type{!Array.<!proto.esnet.netbeam.v1.MetricOutput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.esnet.netbeam.v1.MetricOutput, 3));
};


/** @param {!Array.<!proto.esnet.netbeam.v1.MetricOutput>} value */
proto.esnet.netbeam.v1.Metric.prototype.setOutputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.esnet.netbeam.v1.MetricOutput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.esnet.netbeam.v1.MetricOutput}
 */
proto.esnet.netbeam.v1.Metric.prototype.addOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.esnet.netbeam.v1.MetricOutput, opt_index);
};


proto.esnet.netbeam.v1.Metric.prototype.clearOutputsList = function() {
  this.setOutputsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.CreateMetricRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.esnet.netbeam.v1.CreateMetricRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.CreateMetricRequest.displayName = 'proto.esnet.netbeam.v1.CreateMetricRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.CreateMetricRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.CreateMetricRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.CreateMetricRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.CreateMetricRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: (f = msg.getPath()) && proto.esnet.netbeam.v1.MetricPath.toObject(includeInstance, f),
    description: (f = msg.getDescription()) && proto.esnet.netbeam.v1.MetricDescription.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.CreateMetricRequest}
 */
proto.esnet.netbeam.v1.CreateMetricRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.CreateMetricRequest;
  return proto.esnet.netbeam.v1.CreateMetricRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.CreateMetricRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.CreateMetricRequest}
 */
proto.esnet.netbeam.v1.CreateMetricRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.esnet.netbeam.v1.MetricPath;
      reader.readMessage(value,proto.esnet.netbeam.v1.MetricPath.deserializeBinaryFromReader);
      msg.setPath(value);
      break;
    case 2:
      var value = new proto.esnet.netbeam.v1.MetricDescription;
      reader.readMessage(value,proto.esnet.netbeam.v1.MetricDescription.deserializeBinaryFromReader);
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.CreateMetricRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.CreateMetricRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.CreateMetricRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.CreateMetricRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.esnet.netbeam.v1.MetricPath.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.esnet.netbeam.v1.MetricDescription.serializeBinaryToWriter
    );
  }
};


/**
 * optional MetricPath path = 1;
 * @return {?proto.esnet.netbeam.v1.MetricPath}
 */
proto.esnet.netbeam.v1.CreateMetricRequest.prototype.getPath = function() {
  return /** @type{?proto.esnet.netbeam.v1.MetricPath} */ (
    jspb.Message.getWrapperField(this, proto.esnet.netbeam.v1.MetricPath, 1));
};


/** @param {?proto.esnet.netbeam.v1.MetricPath|undefined} value */
proto.esnet.netbeam.v1.CreateMetricRequest.prototype.setPath = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.esnet.netbeam.v1.CreateMetricRequest.prototype.clearPath = function() {
  this.setPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.esnet.netbeam.v1.CreateMetricRequest.prototype.hasPath = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MetricDescription description = 2;
 * @return {?proto.esnet.netbeam.v1.MetricDescription}
 */
proto.esnet.netbeam.v1.CreateMetricRequest.prototype.getDescription = function() {
  return /** @type{?proto.esnet.netbeam.v1.MetricDescription} */ (
    jspb.Message.getWrapperField(this, proto.esnet.netbeam.v1.MetricDescription, 2));
};


/** @param {?proto.esnet.netbeam.v1.MetricDescription|undefined} value */
proto.esnet.netbeam.v1.CreateMetricRequest.prototype.setDescription = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.esnet.netbeam.v1.CreateMetricRequest.prototype.clearDescription = function() {
  this.setDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.esnet.netbeam.v1.CreateMetricRequest.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.MetricId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.esnet.netbeam.v1.MetricId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.MetricId.displayName = 'proto.esnet.netbeam.v1.MetricId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.MetricId.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.MetricId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.MetricId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.MetricId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.MetricId}
 */
proto.esnet.netbeam.v1.MetricId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.MetricId;
  return proto.esnet.netbeam.v1.MetricId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.MetricId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.MetricId}
 */
proto.esnet.netbeam.v1.MetricId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.MetricId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.MetricId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.MetricId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.MetricId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.esnet.netbeam.v1.MetricId.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.MetricId.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.MetricOutputId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.esnet.netbeam.v1.MetricOutputId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.MetricOutputId.displayName = 'proto.esnet.netbeam.v1.MetricOutputId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.MetricOutputId.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.MetricOutputId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.MetricOutputId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.MetricOutputId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.MetricOutputId}
 */
proto.esnet.netbeam.v1.MetricOutputId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.MetricOutputId;
  return proto.esnet.netbeam.v1.MetricOutputId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.MetricOutputId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.MetricOutputId}
 */
proto.esnet.netbeam.v1.MetricOutputId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.MetricOutputId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.MetricOutputId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.MetricOutputId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.MetricOutputId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.esnet.netbeam.v1.MetricOutputId.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.MetricOutputId.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.MetricProcessorId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.esnet.netbeam.v1.MetricProcessorId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.MetricProcessorId.displayName = 'proto.esnet.netbeam.v1.MetricProcessorId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.MetricProcessorId.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.MetricProcessorId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.MetricProcessorId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.MetricProcessorId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.MetricProcessorId}
 */
proto.esnet.netbeam.v1.MetricProcessorId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.MetricProcessorId;
  return proto.esnet.netbeam.v1.MetricProcessorId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.MetricProcessorId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.MetricProcessorId}
 */
proto.esnet.netbeam.v1.MetricProcessorId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.MetricProcessorId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.MetricProcessorId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.MetricProcessorId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.MetricProcessorId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.esnet.netbeam.v1.MetricProcessorId.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.MetricProcessorId.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.MetricDescriptionList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.esnet.netbeam.v1.MetricDescriptionList.repeatedFields_, null);
};
goog.inherits(proto.esnet.netbeam.v1.MetricDescriptionList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.MetricDescriptionList.displayName = 'proto.esnet.netbeam.v1.MetricDescriptionList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.esnet.netbeam.v1.MetricDescriptionList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.MetricDescriptionList.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.MetricDescriptionList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.MetricDescriptionList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.MetricDescriptionList.toObject = function(includeInstance, msg) {
  var f, obj = {
    descriptionsList: jspb.Message.toObjectList(msg.getDescriptionsList(),
    proto.esnet.netbeam.v1.MetricDescription.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.MetricDescriptionList}
 */
proto.esnet.netbeam.v1.MetricDescriptionList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.MetricDescriptionList;
  return proto.esnet.netbeam.v1.MetricDescriptionList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.MetricDescriptionList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.MetricDescriptionList}
 */
proto.esnet.netbeam.v1.MetricDescriptionList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.esnet.netbeam.v1.MetricDescription;
      reader.readMessage(value,proto.esnet.netbeam.v1.MetricDescription.deserializeBinaryFromReader);
      msg.addDescriptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.MetricDescriptionList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.MetricDescriptionList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.MetricDescriptionList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.MetricDescriptionList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescriptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.esnet.netbeam.v1.MetricDescription.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MetricDescription descriptions = 1;
 * @return {!Array.<!proto.esnet.netbeam.v1.MetricDescription>}
 */
proto.esnet.netbeam.v1.MetricDescriptionList.prototype.getDescriptionsList = function() {
  return /** @type{!Array.<!proto.esnet.netbeam.v1.MetricDescription>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.esnet.netbeam.v1.MetricDescription, 1));
};


/** @param {!Array.<!proto.esnet.netbeam.v1.MetricDescription>} value */
proto.esnet.netbeam.v1.MetricDescriptionList.prototype.setDescriptionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.esnet.netbeam.v1.MetricDescription=} opt_value
 * @param {number=} opt_index
 * @return {!proto.esnet.netbeam.v1.MetricDescription}
 */
proto.esnet.netbeam.v1.MetricDescriptionList.prototype.addDescriptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.esnet.netbeam.v1.MetricDescription, opt_index);
};


proto.esnet.netbeam.v1.MetricDescriptionList.prototype.clearDescriptionsList = function() {
  this.setDescriptionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.MetricList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.esnet.netbeam.v1.MetricList.repeatedFields_, null);
};
goog.inherits(proto.esnet.netbeam.v1.MetricList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.MetricList.displayName = 'proto.esnet.netbeam.v1.MetricList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.esnet.netbeam.v1.MetricList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.MetricList.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.MetricList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.MetricList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.MetricList.toObject = function(includeInstance, msg) {
  var f, obj = {
    metricsList: jspb.Message.toObjectList(msg.getMetricsList(),
    proto.esnet.netbeam.v1.Metric.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.MetricList}
 */
proto.esnet.netbeam.v1.MetricList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.MetricList;
  return proto.esnet.netbeam.v1.MetricList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.MetricList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.MetricList}
 */
proto.esnet.netbeam.v1.MetricList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.esnet.netbeam.v1.Metric;
      reader.readMessage(value,proto.esnet.netbeam.v1.Metric.deserializeBinaryFromReader);
      msg.addMetrics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.MetricList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.MetricList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.MetricList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.MetricList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetricsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.esnet.netbeam.v1.Metric.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Metric metrics = 1;
 * @return {!Array.<!proto.esnet.netbeam.v1.Metric>}
 */
proto.esnet.netbeam.v1.MetricList.prototype.getMetricsList = function() {
  return /** @type{!Array.<!proto.esnet.netbeam.v1.Metric>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.esnet.netbeam.v1.Metric, 1));
};


/** @param {!Array.<!proto.esnet.netbeam.v1.Metric>} value */
proto.esnet.netbeam.v1.MetricList.prototype.setMetricsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.esnet.netbeam.v1.Metric=} opt_value
 * @param {number=} opt_index
 * @return {!proto.esnet.netbeam.v1.Metric}
 */
proto.esnet.netbeam.v1.MetricList.prototype.addMetrics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.esnet.netbeam.v1.Metric, opt_index);
};


proto.esnet.netbeam.v1.MetricList.prototype.clearMetricsList = function() {
  this.setMetricsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.CollectionPath = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.esnet.netbeam.v1.CollectionPath, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.CollectionPath.displayName = 'proto.esnet.netbeam.v1.CollectionPath';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.CollectionPath.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.CollectionPath.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.CollectionPath} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.CollectionPath.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    collection: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.CollectionPath}
 */
proto.esnet.netbeam.v1.CollectionPath.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.CollectionPath;
  return proto.esnet.netbeam.v1.CollectionPath.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.CollectionPath} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.CollectionPath}
 */
proto.esnet.netbeam.v1.CollectionPath.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.CollectionPath.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.CollectionPath.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.CollectionPath} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.CollectionPath.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCollection();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.esnet.netbeam.v1.CollectionPath.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.CollectionPath.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string collection = 2;
 * @return {string}
 */
proto.esnet.netbeam.v1.CollectionPath.prototype.getCollection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.CollectionPath.prototype.setCollection = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.CollectionId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.esnet.netbeam.v1.CollectionId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.CollectionId.displayName = 'proto.esnet.netbeam.v1.CollectionId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.CollectionId.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.CollectionId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.CollectionId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.CollectionId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.CollectionId}
 */
proto.esnet.netbeam.v1.CollectionId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.CollectionId;
  return proto.esnet.netbeam.v1.CollectionId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.CollectionId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.CollectionId}
 */
proto.esnet.netbeam.v1.CollectionId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.CollectionId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.CollectionId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.CollectionId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.CollectionId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.esnet.netbeam.v1.CollectionId.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.CollectionId.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.MetricPath = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.esnet.netbeam.v1.MetricPath, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.MetricPath.displayName = 'proto.esnet.netbeam.v1.MetricPath';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.MetricPath.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.MetricPath.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.MetricPath} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.MetricPath.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    collection: jspb.Message.getFieldWithDefault(msg, 2, ""),
    metric: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.MetricPath}
 */
proto.esnet.netbeam.v1.MetricPath.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.MetricPath;
  return proto.esnet.netbeam.v1.MetricPath.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.MetricPath} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.MetricPath}
 */
proto.esnet.netbeam.v1.MetricPath.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollection(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetric(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.MetricPath.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.MetricPath.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.MetricPath} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.MetricPath.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCollection();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMetric();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.esnet.netbeam.v1.MetricPath.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.MetricPath.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string collection = 2;
 * @return {string}
 */
proto.esnet.netbeam.v1.MetricPath.prototype.getCollection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.MetricPath.prototype.setCollection = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string metric = 3;
 * @return {string}
 */
proto.esnet.netbeam.v1.MetricPath.prototype.getMetric = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.MetricPath.prototype.setMetric = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.CreateMetricProcessorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.esnet.netbeam.v1.CreateMetricProcessorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.CreateMetricProcessorRequest.displayName = 'proto.esnet.netbeam.v1.CreateMetricProcessorRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.CreateMetricProcessorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.CreateMetricProcessorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.CreateMetricProcessorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.CreateMetricProcessorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    collection: jspb.Message.getFieldWithDefault(msg, 2, ""),
    metric: jspb.Message.getFieldWithDefault(msg, 3, ""),
    processor: (f = msg.getProcessor()) && proto.esnet.netbeam.v1.MetricProcessor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.CreateMetricProcessorRequest}
 */
proto.esnet.netbeam.v1.CreateMetricProcessorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.CreateMetricProcessorRequest;
  return proto.esnet.netbeam.v1.CreateMetricProcessorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.CreateMetricProcessorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.CreateMetricProcessorRequest}
 */
proto.esnet.netbeam.v1.CreateMetricProcessorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollection(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetric(value);
      break;
    case 4:
      var value = new proto.esnet.netbeam.v1.MetricProcessor;
      reader.readMessage(value,proto.esnet.netbeam.v1.MetricProcessor.deserializeBinaryFromReader);
      msg.setProcessor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.CreateMetricProcessorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.CreateMetricProcessorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.CreateMetricProcessorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.CreateMetricProcessorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCollection();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMetric();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getProcessor();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.esnet.netbeam.v1.MetricProcessor.serializeBinaryToWriter
    );
  }
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.esnet.netbeam.v1.CreateMetricProcessorRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.CreateMetricProcessorRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string collection = 2;
 * @return {string}
 */
proto.esnet.netbeam.v1.CreateMetricProcessorRequest.prototype.getCollection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.CreateMetricProcessorRequest.prototype.setCollection = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string metric = 3;
 * @return {string}
 */
proto.esnet.netbeam.v1.CreateMetricProcessorRequest.prototype.getMetric = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.CreateMetricProcessorRequest.prototype.setMetric = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional MetricProcessor processor = 4;
 * @return {?proto.esnet.netbeam.v1.MetricProcessor}
 */
proto.esnet.netbeam.v1.CreateMetricProcessorRequest.prototype.getProcessor = function() {
  return /** @type{?proto.esnet.netbeam.v1.MetricProcessor} */ (
    jspb.Message.getWrapperField(this, proto.esnet.netbeam.v1.MetricProcessor, 4));
};


/** @param {?proto.esnet.netbeam.v1.MetricProcessor|undefined} value */
proto.esnet.netbeam.v1.CreateMetricProcessorRequest.prototype.setProcessor = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.esnet.netbeam.v1.CreateMetricProcessorRequest.prototype.clearProcessor = function() {
  this.setProcessor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.esnet.netbeam.v1.CreateMetricProcessorRequest.prototype.hasProcessor = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.CreateMetricOutputRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.esnet.netbeam.v1.CreateMetricOutputRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.CreateMetricOutputRequest.displayName = 'proto.esnet.netbeam.v1.CreateMetricOutputRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.CreateMetricOutputRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.CreateMetricOutputRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.CreateMetricOutputRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.CreateMetricOutputRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: (f = msg.getPath()) && proto.esnet.netbeam.v1.MetricPath.toObject(includeInstance, f),
    output: (f = msg.getOutput()) && proto.esnet.netbeam.v1.MetricOutput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.CreateMetricOutputRequest}
 */
proto.esnet.netbeam.v1.CreateMetricOutputRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.CreateMetricOutputRequest;
  return proto.esnet.netbeam.v1.CreateMetricOutputRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.CreateMetricOutputRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.CreateMetricOutputRequest}
 */
proto.esnet.netbeam.v1.CreateMetricOutputRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.esnet.netbeam.v1.MetricPath;
      reader.readMessage(value,proto.esnet.netbeam.v1.MetricPath.deserializeBinaryFromReader);
      msg.setPath(value);
      break;
    case 2:
      var value = new proto.esnet.netbeam.v1.MetricOutput;
      reader.readMessage(value,proto.esnet.netbeam.v1.MetricOutput.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.CreateMetricOutputRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.CreateMetricOutputRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.CreateMetricOutputRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.CreateMetricOutputRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.esnet.netbeam.v1.MetricPath.serializeBinaryToWriter
    );
  }
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.esnet.netbeam.v1.MetricOutput.serializeBinaryToWriter
    );
  }
};


/**
 * optional MetricPath path = 1;
 * @return {?proto.esnet.netbeam.v1.MetricPath}
 */
proto.esnet.netbeam.v1.CreateMetricOutputRequest.prototype.getPath = function() {
  return /** @type{?proto.esnet.netbeam.v1.MetricPath} */ (
    jspb.Message.getWrapperField(this, proto.esnet.netbeam.v1.MetricPath, 1));
};


/** @param {?proto.esnet.netbeam.v1.MetricPath|undefined} value */
proto.esnet.netbeam.v1.CreateMetricOutputRequest.prototype.setPath = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.esnet.netbeam.v1.CreateMetricOutputRequest.prototype.clearPath = function() {
  this.setPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.esnet.netbeam.v1.CreateMetricOutputRequest.prototype.hasPath = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MetricOutput output = 2;
 * @return {?proto.esnet.netbeam.v1.MetricOutput}
 */
proto.esnet.netbeam.v1.CreateMetricOutputRequest.prototype.getOutput = function() {
  return /** @type{?proto.esnet.netbeam.v1.MetricOutput} */ (
    jspb.Message.getWrapperField(this, proto.esnet.netbeam.v1.MetricOutput, 2));
};


/** @param {?proto.esnet.netbeam.v1.MetricOutput|undefined} value */
proto.esnet.netbeam.v1.CreateMetricOutputRequest.prototype.setOutput = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.esnet.netbeam.v1.CreateMetricOutputRequest.prototype.clearOutput = function() {
  this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.esnet.netbeam.v1.CreateMetricOutputRequest.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.OrganizationId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.esnet.netbeam.v1.OrganizationId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.OrganizationId.displayName = 'proto.esnet.netbeam.v1.OrganizationId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.OrganizationId.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.OrganizationId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.OrganizationId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.OrganizationId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.OrganizationId}
 */
proto.esnet.netbeam.v1.OrganizationId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.OrganizationId;
  return proto.esnet.netbeam.v1.OrganizationId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.OrganizationId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.OrganizationId}
 */
proto.esnet.netbeam.v1.OrganizationId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.OrganizationId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.OrganizationId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.OrganizationId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.OrganizationId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.esnet.netbeam.v1.OrganizationId.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.OrganizationId.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.CreateOrganizationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.esnet.netbeam.v1.CreateOrganizationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.CreateOrganizationRequest.displayName = 'proto.esnet.netbeam.v1.CreateOrganizationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.CreateOrganizationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.CreateOrganizationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.CreateOrganizationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.CreateOrganizationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fullname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.CreateOrganizationRequest}
 */
proto.esnet.netbeam.v1.CreateOrganizationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.CreateOrganizationRequest;
  return proto.esnet.netbeam.v1.CreateOrganizationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.CreateOrganizationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.CreateOrganizationRequest}
 */
proto.esnet.netbeam.v1.CreateOrganizationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.CreateOrganizationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.CreateOrganizationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.CreateOrganizationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.CreateOrganizationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFullname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.esnet.netbeam.v1.CreateOrganizationRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.CreateOrganizationRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string fullName = 2;
 * @return {string}
 */
proto.esnet.netbeam.v1.CreateOrganizationRequest.prototype.getFullname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.CreateOrganizationRequest.prototype.setFullname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esnet.netbeam.v1.CreateCollectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.esnet.netbeam.v1.CreateCollectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.esnet.netbeam.v1.CreateCollectionRequest.displayName = 'proto.esnet.netbeam.v1.CreateCollectionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esnet.netbeam.v1.CreateCollectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.esnet.netbeam.v1.CreateCollectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esnet.netbeam.v1.CreateCollectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.CreateCollectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esnet.netbeam.v1.CreateCollectionRequest}
 */
proto.esnet.netbeam.v1.CreateCollectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esnet.netbeam.v1.CreateCollectionRequest;
  return proto.esnet.netbeam.v1.CreateCollectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esnet.netbeam.v1.CreateCollectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esnet.netbeam.v1.CreateCollectionRequest}
 */
proto.esnet.netbeam.v1.CreateCollectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esnet.netbeam.v1.CreateCollectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esnet.netbeam.v1.CreateCollectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esnet.netbeam.v1.CreateCollectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esnet.netbeam.v1.CreateCollectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.esnet.netbeam.v1.CreateCollectionRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.CreateCollectionRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.esnet.netbeam.v1.CreateCollectionRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.CreateCollectionRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.esnet.netbeam.v1.CreateCollectionRequest.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.esnet.netbeam.v1.CreateCollectionRequest.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.esnet.netbeam.v1.AggregationType = {
  NONE: 0,
  AVG: 1,
  MAX: 2,
  MIN: 3
};

/**
 * @enum {number}
 */
proto.esnet.netbeam.v1.Visible = {
  SHOW: 0,
  HIDE: 1
};

/**
 * @enum {number}
 */
proto.esnet.netbeam.v1.SubscriptionCommand = {
  SUBSCRIBE: 0,
  UNSUBSCRIBE: 1
};

/**
 * @enum {number}
 */
proto.esnet.netbeam.v1.MetricType = {
  COUNTER: 0,
  GUAGE: 1,
  STRING: 3,
  BOOL: 4
};

/**
 * @enum {number}
 */
proto.esnet.netbeam.v1.MetricProcessorType = {
  ROLLUP: 0,
  RATE: 1
};

/**
 * @enum {number}
 */
proto.esnet.netbeam.v1.MetricOutputType = {
  TILE: 0,
  CURRENT: 1,
  ROLLING: 2
};

goog.object.extend(exports, proto.esnet.netbeam.v1);
