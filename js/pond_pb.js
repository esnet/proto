// source: pond.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pond.Collection', null, global);
goog.exportSymbol('proto.pond.Duration', null, global);
goog.exportSymbol('proto.pond.Event', null, global);
goog.exportSymbol('proto.pond.Index', null, global);
goog.exportSymbol('proto.pond.LabelPair', null, global);
goog.exportSymbol('proto.pond.Period', null, global);
goog.exportSymbol('proto.pond.Point', null, global);
goog.exportSymbol('proto.pond.TimeRange', null, global);
goog.exportSymbol('proto.pond.TimeSeries', null, global);
goog.exportSymbol('proto.pond.Timestamp', null, global);
goog.exportSymbol('proto.pond.TypedKey', null, global);
goog.exportSymbol('proto.pond.TypedKey.KeyCase', null, global);
goog.exportSymbol('proto.pond.TypedValue', null, global);
goog.exportSymbol('proto.pond.TypedValue.ValueCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pond.Timestamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pond.Timestamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pond.Timestamp.displayName = 'proto.pond.Timestamp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pond.TimeRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pond.TimeRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pond.TimeRange.displayName = 'proto.pond.TimeRange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pond.Index = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pond.Index, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pond.Index.displayName = 'proto.pond.Index';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pond.Duration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pond.Duration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pond.Duration.displayName = 'proto.pond.Duration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pond.Period = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pond.Period, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pond.Period.displayName = 'proto.pond.Period';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pond.TypedKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pond.TypedKey.oneofGroups_);
};
goog.inherits(proto.pond.TypedKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pond.TypedKey.displayName = 'proto.pond.TypedKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pond.TypedValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pond.TypedValue.oneofGroups_);
};
goog.inherits(proto.pond.TypedValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pond.TypedValue.displayName = 'proto.pond.TypedValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pond.LabelPair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pond.LabelPair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pond.LabelPair.displayName = 'proto.pond.LabelPair';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pond.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pond.Event.repeatedFields_, null);
};
goog.inherits(proto.pond.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pond.Event.displayName = 'proto.pond.Event';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pond.Collection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pond.Collection.repeatedFields_, null);
};
goog.inherits(proto.pond.Collection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pond.Collection.displayName = 'proto.pond.Collection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pond.Point = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pond.Point.repeatedFields_, null);
};
goog.inherits(proto.pond.Point, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pond.Point.displayName = 'proto.pond.Point';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pond.TimeSeries = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pond.TimeSeries.repeatedFields_, null);
};
goog.inherits(proto.pond.TimeSeries, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pond.TimeSeries.displayName = 'proto.pond.TimeSeries';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pond.Timestamp.prototype.toObject = function(opt_includeInstance) {
  return proto.pond.Timestamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pond.Timestamp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.Timestamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    seconds: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nanos: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pond.Timestamp}
 */
proto.pond.Timestamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pond.Timestamp;
  return proto.pond.Timestamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pond.Timestamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pond.Timestamp}
 */
proto.pond.Timestamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeconds(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNanos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pond.Timestamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pond.Timestamp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pond.Timestamp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.Timestamp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeconds();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNanos();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int64 seconds = 1;
 * @return {number}
 */
proto.pond.Timestamp.prototype.getSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pond.Timestamp.prototype.setSeconds = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 nanos = 2;
 * @return {number}
 */
proto.pond.Timestamp.prototype.getNanos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pond.Timestamp.prototype.setNanos = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pond.TimeRange.prototype.toObject = function(opt_includeInstance) {
  return proto.pond.TimeRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pond.TimeRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.TimeRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTime: (f = msg.getStartTime()) && proto.pond.Timestamp.toObject(includeInstance, f),
    endTime: (f = msg.getEndTime()) && proto.pond.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pond.TimeRange}
 */
proto.pond.TimeRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pond.TimeRange;
  return proto.pond.TimeRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pond.TimeRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pond.TimeRange}
 */
proto.pond.TimeRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pond.Timestamp;
      reader.readMessage(value,proto.pond.Timestamp.deserializeBinaryFromReader);
      msg.setStartTime(value);
      break;
    case 2:
      var value = new proto.pond.Timestamp;
      reader.readMessage(value,proto.pond.Timestamp.deserializeBinaryFromReader);
      msg.setEndTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pond.TimeRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pond.TimeRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pond.TimeRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.TimeRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartTime();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pond.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEndTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pond.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional Timestamp start_time = 1;
 * @return {?proto.pond.Timestamp}
 */
proto.pond.TimeRange.prototype.getStartTime = function() {
  return /** @type{?proto.pond.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.pond.Timestamp, 1));
};


/** @param {?proto.pond.Timestamp|undefined} value */
proto.pond.TimeRange.prototype.setStartTime = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pond.TimeRange.prototype.clearStartTime = function() {
  this.setStartTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pond.TimeRange.prototype.hasStartTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Timestamp end_time = 2;
 * @return {?proto.pond.Timestamp}
 */
proto.pond.TimeRange.prototype.getEndTime = function() {
  return /** @type{?proto.pond.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.pond.Timestamp, 2));
};


/** @param {?proto.pond.Timestamp|undefined} value */
proto.pond.TimeRange.prototype.setEndTime = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pond.TimeRange.prototype.clearEndTime = function() {
  this.setEndTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pond.TimeRange.prototype.hasEndTime = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pond.Index.prototype.toObject = function(opt_includeInstance) {
  return proto.pond.Index.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pond.Index} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.Index.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timerange: (f = msg.getTimerange()) && proto.pond.TimeRange.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pond.Index}
 */
proto.pond.Index.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pond.Index;
  return proto.pond.Index.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pond.Index} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pond.Index}
 */
proto.pond.Index.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIndex(value);
      break;
    case 2:
      var value = new proto.pond.TimeRange;
      reader.readMessage(value,proto.pond.TimeRange.deserializeBinaryFromReader);
      msg.setTimerange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pond.Index.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pond.Index.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pond.Index} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.Index.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimerange();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pond.TimeRange.serializeBinaryToWriter
    );
  }
};


/**
 * optional string index = 1;
 * @return {string}
 */
proto.pond.Index.prototype.getIndex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pond.Index.prototype.setIndex = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TimeRange timerange = 2;
 * @return {?proto.pond.TimeRange}
 */
proto.pond.Index.prototype.getTimerange = function() {
  return /** @type{?proto.pond.TimeRange} */ (
    jspb.Message.getWrapperField(this, proto.pond.TimeRange, 2));
};


/** @param {?proto.pond.TimeRange|undefined} value */
proto.pond.Index.prototype.setTimerange = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pond.Index.prototype.clearTimerange = function() {
  this.setTimerange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pond.Index.prototype.hasTimerange = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pond.Duration.prototype.toObject = function(opt_includeInstance) {
  return proto.pond.Duration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pond.Duration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.Duration.toObject = function(includeInstance, msg) {
  var f, obj = {
    duration: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pond.Duration}
 */
proto.pond.Duration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pond.Duration;
  return proto.pond.Duration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pond.Duration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pond.Duration}
 */
proto.pond.Duration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pond.Duration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pond.Duration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pond.Duration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.Duration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 duration = 1;
 * @return {number}
 */
proto.pond.Duration.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pond.Duration.prototype.setDuration = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pond.Period.prototype.toObject = function(opt_includeInstance) {
  return proto.pond.Period.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pond.Period} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.Period.toObject = function(includeInstance, msg) {
  var f, obj = {
    frequency: (f = msg.getFrequency()) && proto.pond.Duration.toObject(includeInstance, f),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pond.Period}
 */
proto.pond.Period.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pond.Period;
  return proto.pond.Period.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pond.Period} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pond.Period}
 */
proto.pond.Period.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pond.Duration;
      reader.readMessage(value,proto.pond.Duration.deserializeBinaryFromReader);
      msg.setFrequency(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pond.Period.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pond.Period.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pond.Period} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.Period.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrequency();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pond.Duration.serializeBinaryToWriter
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional Duration frequency = 1;
 * @return {?proto.pond.Duration}
 */
proto.pond.Period.prototype.getFrequency = function() {
  return /** @type{?proto.pond.Duration} */ (
    jspb.Message.getWrapperField(this, proto.pond.Duration, 1));
};


/** @param {?proto.pond.Duration|undefined} value */
proto.pond.Period.prototype.setFrequency = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pond.Period.prototype.clearFrequency = function() {
  this.setFrequency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pond.Period.prototype.hasFrequency = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 offset = 2;
 * @return {number}
 */
proto.pond.Period.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pond.Period.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pond.TypedKey.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.pond.TypedKey.KeyCase = {
  KEY_NOT_SET: 0,
  TIMESTAMP_KEY: 1,
  TIMERANGE_KEY: 2,
  INDEX_KEY: 3
};

/**
 * @return {proto.pond.TypedKey.KeyCase}
 */
proto.pond.TypedKey.prototype.getKeyCase = function() {
  return /** @type {proto.pond.TypedKey.KeyCase} */(jspb.Message.computeOneofCase(this, proto.pond.TypedKey.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pond.TypedKey.prototype.toObject = function(opt_includeInstance) {
  return proto.pond.TypedKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pond.TypedKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.TypedKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestampKey: (f = msg.getTimestampKey()) && proto.pond.Timestamp.toObject(includeInstance, f),
    timerangeKey: (f = msg.getTimerangeKey()) && proto.pond.TimeRange.toObject(includeInstance, f),
    indexKey: (f = msg.getIndexKey()) && proto.pond.Index.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pond.TypedKey}
 */
proto.pond.TypedKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pond.TypedKey;
  return proto.pond.TypedKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pond.TypedKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pond.TypedKey}
 */
proto.pond.TypedKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pond.Timestamp;
      reader.readMessage(value,proto.pond.Timestamp.deserializeBinaryFromReader);
      msg.setTimestampKey(value);
      break;
    case 2:
      var value = new proto.pond.TimeRange;
      reader.readMessage(value,proto.pond.TimeRange.deserializeBinaryFromReader);
      msg.setTimerangeKey(value);
      break;
    case 3:
      var value = new proto.pond.Index;
      reader.readMessage(value,proto.pond.Index.deserializeBinaryFromReader);
      msg.setIndexKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pond.TypedKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pond.TypedKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pond.TypedKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.TypedKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestampKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pond.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTimerangeKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pond.TimeRange.serializeBinaryToWriter
    );
  }
  f = message.getIndexKey();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pond.Index.serializeBinaryToWriter
    );
  }
};


/**
 * optional Timestamp timestamp_key = 1;
 * @return {?proto.pond.Timestamp}
 */
proto.pond.TypedKey.prototype.getTimestampKey = function() {
  return /** @type{?proto.pond.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.pond.Timestamp, 1));
};


/** @param {?proto.pond.Timestamp|undefined} value */
proto.pond.TypedKey.prototype.setTimestampKey = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.pond.TypedKey.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pond.TypedKey.prototype.clearTimestampKey = function() {
  this.setTimestampKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pond.TypedKey.prototype.hasTimestampKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TimeRange timerange_key = 2;
 * @return {?proto.pond.TimeRange}
 */
proto.pond.TypedKey.prototype.getTimerangeKey = function() {
  return /** @type{?proto.pond.TimeRange} */ (
    jspb.Message.getWrapperField(this, proto.pond.TimeRange, 2));
};


/** @param {?proto.pond.TimeRange|undefined} value */
proto.pond.TypedKey.prototype.setTimerangeKey = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.pond.TypedKey.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pond.TypedKey.prototype.clearTimerangeKey = function() {
  this.setTimerangeKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pond.TypedKey.prototype.hasTimerangeKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Index index_key = 3;
 * @return {?proto.pond.Index}
 */
proto.pond.TypedKey.prototype.getIndexKey = function() {
  return /** @type{?proto.pond.Index} */ (
    jspb.Message.getWrapperField(this, proto.pond.Index, 3));
};


/** @param {?proto.pond.Index|undefined} value */
proto.pond.TypedKey.prototype.setIndexKey = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.pond.TypedKey.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pond.TypedKey.prototype.clearIndexKey = function() {
  this.setIndexKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pond.TypedKey.prototype.hasIndexKey = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pond.TypedValue.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.pond.TypedValue.ValueCase = {
  VALUE_NOT_SET: 0,
  BOOL_VALUE: 1,
  INT64_VALUE: 2,
  DOUBLE_VALUE: 3,
  STRING_VALUE: 4
};

/**
 * @return {proto.pond.TypedValue.ValueCase}
 */
proto.pond.TypedValue.prototype.getValueCase = function() {
  return /** @type {proto.pond.TypedValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.pond.TypedValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pond.TypedValue.prototype.toObject = function(opt_includeInstance) {
  return proto.pond.TypedValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pond.TypedValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.TypedValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    boolValue: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    int64Value: jspb.Message.getFieldWithDefault(msg, 2, 0),
    doubleValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    stringValue: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pond.TypedValue}
 */
proto.pond.TypedValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pond.TypedValue;
  return proto.pond.TypedValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pond.TypedValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pond.TypedValue}
 */
proto.pond.TypedValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInt64Value(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoubleValue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pond.TypedValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pond.TypedValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pond.TypedValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.TypedValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bool bool_value = 1;
 * @return {boolean}
 */
proto.pond.TypedValue.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.pond.TypedValue.prototype.setBoolValue = function(value) {
  jspb.Message.setOneofField(this, 1, proto.pond.TypedValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.pond.TypedValue.prototype.clearBoolValue = function() {
  jspb.Message.setOneofField(this, 1, proto.pond.TypedValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pond.TypedValue.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 int64_value = 2;
 * @return {number}
 */
proto.pond.TypedValue.prototype.getInt64Value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pond.TypedValue.prototype.setInt64Value = function(value) {
  jspb.Message.setOneofField(this, 2, proto.pond.TypedValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.pond.TypedValue.prototype.clearInt64Value = function() {
  jspb.Message.setOneofField(this, 2, proto.pond.TypedValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pond.TypedValue.prototype.hasInt64Value = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double double_value = 3;
 * @return {number}
 */
proto.pond.TypedValue.prototype.getDoubleValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.pond.TypedValue.prototype.setDoubleValue = function(value) {
  jspb.Message.setOneofField(this, 3, proto.pond.TypedValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.pond.TypedValue.prototype.clearDoubleValue = function() {
  jspb.Message.setOneofField(this, 3, proto.pond.TypedValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pond.TypedValue.prototype.hasDoubleValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string string_value = 4;
 * @return {string}
 */
proto.pond.TypedValue.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.pond.TypedValue.prototype.setStringValue = function(value) {
  jspb.Message.setOneofField(this, 4, proto.pond.TypedValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.pond.TypedValue.prototype.clearStringValue = function() {
  jspb.Message.setOneofField(this, 4, proto.pond.TypedValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pond.TypedValue.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pond.LabelPair.prototype.toObject = function(opt_includeInstance) {
  return proto.pond.LabelPair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pond.LabelPair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.LabelPair.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pond.LabelPair}
 */
proto.pond.LabelPair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pond.LabelPair;
  return proto.pond.LabelPair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pond.LabelPair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pond.LabelPair}
 */
proto.pond.LabelPair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pond.LabelPair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pond.LabelPair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pond.LabelPair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.LabelPair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pond.LabelPair.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pond.LabelPair.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.pond.LabelPair.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pond.LabelPair.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pond.Event.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pond.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.pond.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pond.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    key: (f = msg.getKey()) && proto.pond.TypedKey.toObject(includeInstance, f),
    value: (f = msg.getValue()) && proto.pond.TypedValue.toObject(includeInstance, f),
    labelsList: jspb.Message.toObjectList(msg.getLabelsList(),
    proto.pond.LabelPair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pond.Event}
 */
proto.pond.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pond.Event;
  return proto.pond.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pond.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pond.Event}
 */
proto.pond.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.pond.TypedKey;
      reader.readMessage(value,proto.pond.TypedKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 3:
      var value = new proto.pond.TypedValue;
      reader.readMessage(value,proto.pond.TypedValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 4:
      var value = new proto.pond.LabelPair;
      reader.readMessage(value,proto.pond.LabelPair.deserializeBinaryFromReader);
      msg.addLabels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pond.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pond.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pond.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pond.TypedKey.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pond.TypedValue.serializeBinaryToWriter
    );
  }
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.pond.LabelPair.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pond.Event.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pond.Event.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TypedKey key = 2;
 * @return {?proto.pond.TypedKey}
 */
proto.pond.Event.prototype.getKey = function() {
  return /** @type{?proto.pond.TypedKey} */ (
    jspb.Message.getWrapperField(this, proto.pond.TypedKey, 2));
};


/** @param {?proto.pond.TypedKey|undefined} value */
proto.pond.Event.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pond.Event.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pond.Event.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TypedValue value = 3;
 * @return {?proto.pond.TypedValue}
 */
proto.pond.Event.prototype.getValue = function() {
  return /** @type{?proto.pond.TypedValue} */ (
    jspb.Message.getWrapperField(this, proto.pond.TypedValue, 3));
};


/** @param {?proto.pond.TypedValue|undefined} value */
proto.pond.Event.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pond.Event.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pond.Event.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated LabelPair labels = 4;
 * @return {!Array<!proto.pond.LabelPair>}
 */
proto.pond.Event.prototype.getLabelsList = function() {
  return /** @type{!Array<!proto.pond.LabelPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pond.LabelPair, 4));
};


/** @param {!Array<!proto.pond.LabelPair>} value */
proto.pond.Event.prototype.setLabelsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.pond.LabelPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pond.LabelPair}
 */
proto.pond.Event.prototype.addLabels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.pond.LabelPair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pond.Event.prototype.clearLabelsList = function() {
  this.setLabelsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pond.Collection.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pond.Collection.prototype.toObject = function(opt_includeInstance) {
  return proto.pond.Collection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pond.Collection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.Collection.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.pond.Event.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pond.Collection}
 */
proto.pond.Collection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pond.Collection;
  return proto.pond.Collection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pond.Collection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pond.Collection}
 */
proto.pond.Collection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.pond.Event;
      reader.readMessage(value,proto.pond.Event.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pond.Collection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pond.Collection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pond.Collection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.Collection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pond.Event.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Event events = 2;
 * @return {!Array<!proto.pond.Event>}
 */
proto.pond.Collection.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.pond.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pond.Event, 2));
};


/** @param {!Array<!proto.pond.Event>} value */
proto.pond.Collection.prototype.setEventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pond.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pond.Event}
 */
proto.pond.Collection.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pond.Event, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pond.Collection.prototype.clearEventsList = function() {
  this.setEventsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pond.Point.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pond.Point.prototype.toObject = function(opt_includeInstance) {
  return proto.pond.Point.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pond.Point} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.Point.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.pond.TypedKey.toObject(includeInstance, f),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.pond.TypedValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pond.Point}
 */
proto.pond.Point.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pond.Point;
  return proto.pond.Point.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pond.Point} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pond.Point}
 */
proto.pond.Point.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pond.TypedKey;
      reader.readMessage(value,proto.pond.TypedKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.pond.TypedValue;
      reader.readMessage(value,proto.pond.TypedValue.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pond.Point.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pond.Point.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pond.Point} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.Point.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pond.TypedKey.serializeBinaryToWriter
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pond.TypedValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional TypedKey key = 1;
 * @return {?proto.pond.TypedKey}
 */
proto.pond.Point.prototype.getKey = function() {
  return /** @type{?proto.pond.TypedKey} */ (
    jspb.Message.getWrapperField(this, proto.pond.TypedKey, 1));
};


/** @param {?proto.pond.TypedKey|undefined} value */
proto.pond.Point.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pond.Point.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pond.Point.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TypedValue values = 2;
 * @return {!Array<!proto.pond.TypedValue>}
 */
proto.pond.Point.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.pond.TypedValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pond.TypedValue, 2));
};


/** @param {!Array<!proto.pond.TypedValue>} value */
proto.pond.Point.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pond.TypedValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pond.TypedValue}
 */
proto.pond.Point.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pond.TypedValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pond.Point.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pond.TimeSeries.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pond.TimeSeries.prototype.toObject = function(opt_includeInstance) {
  return proto.pond.TimeSeries.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pond.TimeSeries} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.TimeSeries.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelsList: jspb.Message.toObjectList(msg.getLabelsList(),
    proto.pond.LabelPair.toObject, includeInstance),
    columnsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    proto.pond.Point.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pond.TimeSeries}
 */
proto.pond.TimeSeries.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pond.TimeSeries;
  return proto.pond.TimeSeries.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pond.TimeSeries} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pond.TimeSeries}
 */
proto.pond.TimeSeries.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pond.LabelPair;
      reader.readMessage(value,proto.pond.LabelPair.deserializeBinaryFromReader);
      msg.addLabels(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addColumns(value);
      break;
    case 3:
      var value = new proto.pond.Point;
      reader.readMessage(value,proto.pond.Point.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pond.TimeSeries.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pond.TimeSeries.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pond.TimeSeries} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pond.TimeSeries.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pond.LabelPair.serializeBinaryToWriter
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.pond.Point.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LabelPair labels = 1;
 * @return {!Array<!proto.pond.LabelPair>}
 */
proto.pond.TimeSeries.prototype.getLabelsList = function() {
  return /** @type{!Array<!proto.pond.LabelPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pond.LabelPair, 1));
};


/** @param {!Array<!proto.pond.LabelPair>} value */
proto.pond.TimeSeries.prototype.setLabelsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pond.LabelPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pond.LabelPair}
 */
proto.pond.TimeSeries.prototype.addLabels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pond.LabelPair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pond.TimeSeries.prototype.clearLabelsList = function() {
  this.setLabelsList([]);
};


/**
 * repeated string columns = 2;
 * @return {!Array<string>}
 */
proto.pond.TimeSeries.prototype.getColumnsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.pond.TimeSeries.prototype.setColumnsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.pond.TimeSeries.prototype.addColumns = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pond.TimeSeries.prototype.clearColumnsList = function() {
  this.setColumnsList([]);
};


/**
 * repeated Point points = 3;
 * @return {!Array<!proto.pond.Point>}
 */
proto.pond.TimeSeries.prototype.getPointsList = function() {
  return /** @type{!Array<!proto.pond.Point>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pond.Point, 3));
};


/** @param {!Array<!proto.pond.Point>} value */
proto.pond.TimeSeries.prototype.setPointsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.pond.Point=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pond.Point}
 */
proto.pond.TimeSeries.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.pond.Point, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pond.TimeSeries.prototype.clearPointsList = function() {
  this.setPointsList([]);
};


goog.object.extend(exports, proto.pond);
