syntax = "proto3";

import "pond.proto";

package netbeam;
option go_package = "github.com/esnet/proto/go/netbeam";

message Empty {
}

// The namespace, which is made up of the organization and the collection e.g. { organization: "esnet", collection: "prod"}
message Namespace {
    // The organization this request is associated with e.g. "esnet"
    string organization = 1;

    // The collection within the organization's data the request is for. e.g. "prod"
    string collection = 2;
}

// The full resource path e.g. ["devices", "chic-cr5", "interfaces", "1/1/1"]
message Resource {
    repeated string path = 1;
}

message Organization {
    // The database ID of the organization
    int32 id = 1;

    // The short name of the organization
    string name = 2;

    // A longer more descriptive name for the organization
    string description = 3;
}

message OrganizationList {
    // The list of organizations
    repeated Organization organizations = 1;
}

message Collection {
    // The database ID of the Collection
    int32 id = 1;

    // The namespace of anything within this Collection, contains both the Organization name
    // and the Collection name e.g. {organization: "esnet", collection: "prod"}
    Namespace namespace = 2;

    // A longer more human readable name or description for the Collection
    string description = 3;
}

message CollectionList {
    // A list of Collections
    repeated Collection collections = 1;
}

message Source {
    // The database ID of the Source
    int32 id = 1;

    // The namespace that contains the Source e.g. {organization: "esnet", collection: "prod"}
    Namespace namespace = 2;

    // The index of the Source, which is how the Source is referred to within ingest Events
    int32 index = 3;

     // Priority, which determines which Events will be used if the same Event comes from multiple sources
    int32 priority = 4;

    // Description of the Source and what it represents
    string description = 5;
}

message SourceList {
    // The list of Sources
    repeated Source sources = 1;
}

message MetricSpec {
    // The ID of the Metric
    int32 id = 1;

    // The namespace to register the Metric within
    Namespace namespace = 2;

    // The type of the metric: bytes, counter, gauge or string
    string type = 3;

    // The scope wildcard which determines which Resources the Metric will apply to
    string scope = 4;

    // The base name of the metric e.g. "traffic"
    string name = 5;

    // The suffic of the metric e.g. "in" or "out"
    string suffix = 6;

    // The alignment of the data to periodic boundaries
    string align = 7;

    // The  units of the output data if applicable. Applies to gauges and counters while bytes can
    // be assumed to output bits/sec rates and string types are unitless. A gauge of say kb of memory
    // will output kb as its units. A counter of units errors will output a rate of errors as errors/sec.
    string units = 8;
}

message MetricSpecList {
    // The list of Metric Specs
    repeated MetricSpec specs = 1;
}

//
// Service Request objects
//

// The request message containing the user's name.
message HelloRequest {
    string name = 1;
}
    
// The response message containing the greetings
message HelloReply {
    string message = 1;
    pond.Timestamp tstamp = 2;
}

message TileRequest {
    // The namespace
    Namespace namespace = 1;

    // The resource as a path
    Resource resource = 2;

    // The metric to get the tile from, for example "traffic/in"
    string metric = 3;

    // The tile index, for example "1d-1234"
    string index = 4;
}

message OrganizationListRequest {
}

message OrganizationRequest {
    string name = 1;
}

message CollectionListRequest {
    // The short name of the Organization containing the Collections
    string organization = 1;
}

message CollectionRequest {
    // The Organization to look up the Collection in
    string organization = 1;

    // The short name of the Collection
    string name = 2;
}

message CreateSourceRequest {
    // The namespace containing the Source
    Namespace namespace = 1;

    // The index of the Source, which should be unique, and is how the source is referred to within ingest events
    int32 index = 2;

    // The relative priority of the Source used to merge events
    int32 priority = 3;

    // A human friendly escription of the Source and what it represents
    string description = 4;
}

message ChangeSourcePriorityRequest {
    // The namespace containing the Source
    Namespace namespace = 1;

    // The index of the Source to update
    int32 index = 2;

    // The new relative priority of the Source
    int32 priority = 3;
}

message SourceListRequest {
    Namespace namespace = 1;
}

message SourceRequest {
    // The Organization and Collection of the source
    Namespace namespace = 1;

    // The index of the Source
    string index = 2;
}

message DeleteSourceRequest {
    // The namespace containing the Source
    Namespace namespace = 1;

    // The index of the Source to delete
    int32 index = 2;
}

message MetricSpecsRequest {
    // The namespace to request the Metrics Specs within
    Namespace namespace = 1;
}

message MetricSpecRequest {
    // The namespace containing the Metric
    Namespace namespace = 1;

    // The id of the Metric Spec to fetch
    int32 id = 2;
}

message RegisterMetricSpecRequest {
    // The namespace to register the Metric Spec within
    Namespace namespace = 1;

    // The scope wildcard which determines which Resources the Metric will apply to.
    // e.g. "devices/*/interfaces/*"
    string scope = 2;

    // The base name of the metric e.g. "traffic"
    string name = 3;

    // The suffic of the metric e.g. "in" or "out"
    string suffix = 4;

    // The alignment of the data to periodic boundaries e.g. "30s" or "5m"
    string align = 5;

    // Units, applicable to counter and gauge types. For counter types the output rates
    // will be ${units}/s and for gauges the output units will just be ${units}. For example
    // a counter of errors my have units "errors" and will output "errors/sec", while a
    // temperature gauge may have units "deg C" which will be its output units as well
    string units = 6;
}

//
// Netbeam gRPC API Service description
//

service Netbeam {
    // Say hello to netbeam
    rpc SayHello (HelloRequest) returns (HelloReply) {}

    //
    // Queries
    //

    // Requests a tile from the netbeam core for a specific metric
    rpc FetchTile (TileRequest) returns (pond.TimeSeries) {}

    //
    // Admin: Organizations
    //

    // Request the list of Organizations registered with netbeam
    rpc ListOrganizations (OrganizationListRequest) returns (OrganizationList) {}

    // Get a specific Organization by supplying it's short name
    rpc GetOrganization (OrganizationRequest) returns (Organization) {}

    //
    // Admin: Collections
    //

    // Request the list of Collections within an Organization registered with netbeam
    rpc ListCollections (CollectionListRequest) returns (CollectionList) {}

    // Get a specific Collection by supplying the Organization it is in as well as the Collection short name
    rpc GetCollection (CollectionRequest) returns (Collection) {}

    //
    // Admin: Sources
    //

    // Request the list of all Sources within a Collection. The list will be returned in order of priority.
    rpc ListSources (SourceListRequest) returns (SourceList) {}

    // Get a specific Source by supplying the Organization, Collection and the Source index
    rpc GetSource (SourceRequest) returns (Source) {}

    // Registers a new Source with the Collection
    rpc CreateSource (CreateSourceRequest) returns (Source) {}

    // Update the Source priority
    rpc UpdateSourcePriority (ChangeSourcePriorityRequest) returns (Source) {}

    // Delete the Source
    rpc DeleteSource (DeleteSourceRequest) returns (Empty) {}

    //
    // Admin: Metrics
    //

    // Request a list of all Metrics Specs registered to the Collection
    rpc ListMetricsSpecs (MetricSpecsRequest) returns (MetricSpecList) {}

    // Get a specific Source by supplying the Organization, Collection and the Source index
    rpc GetMetricSpec (MetricSpecRequest) returns (MetricSpec) {}

    // Register a Byte Counter Metric with netbeam
    rpc RegisterByteMetric (RegisterMetricSpecRequest) returns (MetricSpec) {}

    // Register a Counter Metric with netbeam
    rpc RegisterCounterMetric (RegisterMetricSpecRequest) returns (MetricSpec) {}

    // Register a Gauge Metric with netbeam
    rpc RegisterGaugeMetric (RegisterMetricSpecRequest) returns (MetricSpec) {}

    // Register a String Metric with netbeam
    rpc RegisterStringMetric (RegisterMetricSpecRequest) returns (MetricSpec) {}
}
