// Code generated by protoc-gen-go. DO NOT EDIT.
// source: netbeam.proto

package netbeam

import (
	context "context"
	fmt "fmt"
	pond "github.com/esnet/proto/go/pond"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

// The namespace, which is made up of the organization and the collection e.g. { organization: "esnet", collection: "prod"}
type Namespace struct {
	// The organization this request is associated with e.g. "esnet"
	Organization string `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	// The collection within the organization's data the request is for. e.g. "prod"
	Collection           string   `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Namespace) Reset()         { *m = Namespace{} }
func (m *Namespace) String() string { return proto.CompactTextString(m) }
func (*Namespace) ProtoMessage()    {}
func (*Namespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{1}
}

func (m *Namespace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Namespace.Unmarshal(m, b)
}
func (m *Namespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Namespace.Marshal(b, m, deterministic)
}
func (m *Namespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Namespace.Merge(m, src)
}
func (m *Namespace) XXX_Size() int {
	return xxx_messageInfo_Namespace.Size(m)
}
func (m *Namespace) XXX_DiscardUnknown() {
	xxx_messageInfo_Namespace.DiscardUnknown(m)
}

var xxx_messageInfo_Namespace proto.InternalMessageInfo

func (m *Namespace) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *Namespace) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

// The full resource path e.g. ["devices", "chic-cr5", "interfaces", "1/1/1"]
type Resource struct {
	Path                 []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{2}
}

func (m *Resource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resource.Unmarshal(m, b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return xxx_messageInfo_Resource.Size(m)
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func (m *Resource) GetPath() []string {
	if m != nil {
		return m.Path
	}
	return nil
}

type Organization struct {
	// The database ID of the organization
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The short name of the organization
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A longer more descriptive name for the organization
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Organization) Reset()         { *m = Organization{} }
func (m *Organization) String() string { return proto.CompactTextString(m) }
func (*Organization) ProtoMessage()    {}
func (*Organization) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{3}
}

func (m *Organization) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Organization.Unmarshal(m, b)
}
func (m *Organization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Organization.Marshal(b, m, deterministic)
}
func (m *Organization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Organization.Merge(m, src)
}
func (m *Organization) XXX_Size() int {
	return xxx_messageInfo_Organization.Size(m)
}
func (m *Organization) XXX_DiscardUnknown() {
	xxx_messageInfo_Organization.DiscardUnknown(m)
}

var xxx_messageInfo_Organization proto.InternalMessageInfo

func (m *Organization) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Organization) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Organization) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type OrganizationList struct {
	// The list of organizations
	Organizations        []*Organization `protobuf:"bytes,1,rep,name=organizations,proto3" json:"organizations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *OrganizationList) Reset()         { *m = OrganizationList{} }
func (m *OrganizationList) String() string { return proto.CompactTextString(m) }
func (*OrganizationList) ProtoMessage()    {}
func (*OrganizationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{4}
}

func (m *OrganizationList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrganizationList.Unmarshal(m, b)
}
func (m *OrganizationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrganizationList.Marshal(b, m, deterministic)
}
func (m *OrganizationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationList.Merge(m, src)
}
func (m *OrganizationList) XXX_Size() int {
	return xxx_messageInfo_OrganizationList.Size(m)
}
func (m *OrganizationList) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationList.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationList proto.InternalMessageInfo

func (m *OrganizationList) GetOrganizations() []*Organization {
	if m != nil {
		return m.Organizations
	}
	return nil
}

type Collection struct {
	// The database ID of the Collection
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The namespace of anything within this Collection, contains both the Organization name
	// and the Collection name e.g. {organization: "esnet", collection: "prod"}
	Namespace *Namespace `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// A longer more human readable name or description for the Collection
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Collection) Reset()         { *m = Collection{} }
func (m *Collection) String() string { return proto.CompactTextString(m) }
func (*Collection) ProtoMessage()    {}
func (*Collection) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{5}
}

func (m *Collection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Collection.Unmarshal(m, b)
}
func (m *Collection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Collection.Marshal(b, m, deterministic)
}
func (m *Collection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Collection.Merge(m, src)
}
func (m *Collection) XXX_Size() int {
	return xxx_messageInfo_Collection.Size(m)
}
func (m *Collection) XXX_DiscardUnknown() {
	xxx_messageInfo_Collection.DiscardUnknown(m)
}

var xxx_messageInfo_Collection proto.InternalMessageInfo

func (m *Collection) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Collection) GetNamespace() *Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *Collection) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type CollectionList struct {
	// A list of Collections
	Collections          []*Collection `protobuf:"bytes,1,rep,name=collections,proto3" json:"collections,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CollectionList) Reset()         { *m = CollectionList{} }
func (m *CollectionList) String() string { return proto.CompactTextString(m) }
func (*CollectionList) ProtoMessage()    {}
func (*CollectionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{6}
}

func (m *CollectionList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectionList.Unmarshal(m, b)
}
func (m *CollectionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectionList.Marshal(b, m, deterministic)
}
func (m *CollectionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionList.Merge(m, src)
}
func (m *CollectionList) XXX_Size() int {
	return xxx_messageInfo_CollectionList.Size(m)
}
func (m *CollectionList) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionList.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionList proto.InternalMessageInfo

func (m *CollectionList) GetCollections() []*Collection {
	if m != nil {
		return m.Collections
	}
	return nil
}

type Source struct {
	// The database ID of the Source
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The namespace that contains the Source e.g. {organization: "esnet", collection: "prod"}
	Namespace *Namespace `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The index of the Source, which is how the Source is referred to within ingest Events
	Index int32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	// Priority, which determines which Events will be used if the same Event comes from multiple sources
	Priority int32 `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	// Description of the Source and what it represents
	Description          string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Source) Reset()         { *m = Source{} }
func (m *Source) String() string { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()    {}
func (*Source) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{7}
}

func (m *Source) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Source.Unmarshal(m, b)
}
func (m *Source) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Source.Marshal(b, m, deterministic)
}
func (m *Source) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Source.Merge(m, src)
}
func (m *Source) XXX_Size() int {
	return xxx_messageInfo_Source.Size(m)
}
func (m *Source) XXX_DiscardUnknown() {
	xxx_messageInfo_Source.DiscardUnknown(m)
}

var xxx_messageInfo_Source proto.InternalMessageInfo

func (m *Source) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Source) GetNamespace() *Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *Source) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Source) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Source) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type SourceList struct {
	// The list of Sources
	Sources              []*Source `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SourceList) Reset()         { *m = SourceList{} }
func (m *SourceList) String() string { return proto.CompactTextString(m) }
func (*SourceList) ProtoMessage()    {}
func (*SourceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{8}
}

func (m *SourceList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SourceList.Unmarshal(m, b)
}
func (m *SourceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SourceList.Marshal(b, m, deterministic)
}
func (m *SourceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceList.Merge(m, src)
}
func (m *SourceList) XXX_Size() int {
	return xxx_messageInfo_SourceList.Size(m)
}
func (m *SourceList) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceList.DiscardUnknown(m)
}

var xxx_messageInfo_SourceList proto.InternalMessageInfo

func (m *SourceList) GetSources() []*Source {
	if m != nil {
		return m.Sources
	}
	return nil
}

type MetricSpec struct {
	// The namespace to register the Metric within
	Namespace *Namespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The type of the metric: bytes, counter, gauge or string
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// The scope wildcard which determines which Resources the Metric will apply to
	Scope string `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	// The base name of the metric e.g. "traffic"
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// The suffic of the metric e.g. "in" or "out"
	Suffix string `protobuf:"bytes,5,opt,name=suffix,proto3" json:"suffix,omitempty"`
	// The alignment of the data to periodic boundaries
	Align string `protobuf:"bytes,6,opt,name=align,proto3" json:"align,omitempty"`
	// The  units of the output data if applicable. Applies to gauges and counters while bytes can
	// be assumed to output bits/sec rates and string types are unitless. A gauge of say kb of memory
	// will output kb as its units. A counter of units errors will output a rate of errors as errors/sec.
	Units                string   `protobuf:"bytes,7,opt,name=units,proto3" json:"units,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricSpec) Reset()         { *m = MetricSpec{} }
func (m *MetricSpec) String() string { return proto.CompactTextString(m) }
func (*MetricSpec) ProtoMessage()    {}
func (*MetricSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{9}
}

func (m *MetricSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricSpec.Unmarshal(m, b)
}
func (m *MetricSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricSpec.Marshal(b, m, deterministic)
}
func (m *MetricSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricSpec.Merge(m, src)
}
func (m *MetricSpec) XXX_Size() int {
	return xxx_messageInfo_MetricSpec.Size(m)
}
func (m *MetricSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MetricSpec proto.InternalMessageInfo

func (m *MetricSpec) GetNamespace() *Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *MetricSpec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MetricSpec) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *MetricSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricSpec) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

func (m *MetricSpec) GetAlign() string {
	if m != nil {
		return m.Align
	}
	return ""
}

func (m *MetricSpec) GetUnits() string {
	if m != nil {
		return m.Units
	}
	return ""
}

type MetricSpecList struct {
	// The list of Metric Specs
	Specs                []*MetricSpec `protobuf:"bytes,1,rep,name=specs,proto3" json:"specs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MetricSpecList) Reset()         { *m = MetricSpecList{} }
func (m *MetricSpecList) String() string { return proto.CompactTextString(m) }
func (*MetricSpecList) ProtoMessage()    {}
func (*MetricSpecList) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{10}
}

func (m *MetricSpecList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricSpecList.Unmarshal(m, b)
}
func (m *MetricSpecList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricSpecList.Marshal(b, m, deterministic)
}
func (m *MetricSpecList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricSpecList.Merge(m, src)
}
func (m *MetricSpecList) XXX_Size() int {
	return xxx_messageInfo_MetricSpecList.Size(m)
}
func (m *MetricSpecList) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricSpecList.DiscardUnknown(m)
}

var xxx_messageInfo_MetricSpecList proto.InternalMessageInfo

func (m *MetricSpecList) GetSpecs() []*MetricSpec {
	if m != nil {
		return m.Specs
	}
	return nil
}

// The request message containing the user's name.
type HelloRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{11}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type HelloReply struct {
	Message              string          `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Tstamp               *pond.Timestamp `protobuf:"bytes,2,opt,name=tstamp,proto3" json:"tstamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HelloReply) Reset()         { *m = HelloReply{} }
func (m *HelloReply) String() string { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()    {}
func (*HelloReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{12}
}

func (m *HelloReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloReply.Unmarshal(m, b)
}
func (m *HelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloReply.Marshal(b, m, deterministic)
}
func (m *HelloReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReply.Merge(m, src)
}
func (m *HelloReply) XXX_Size() int {
	return xxx_messageInfo_HelloReply.Size(m)
}
func (m *HelloReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReply.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReply proto.InternalMessageInfo

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *HelloReply) GetTstamp() *pond.Timestamp {
	if m != nil {
		return m.Tstamp
	}
	return nil
}

type TileRequest struct {
	// The namespace
	Namespace *Namespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The resource as a path
	Resource *Resource `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	// The metric to get the tile from, for example "traffic/in"
	Metric string `protobuf:"bytes,3,opt,name=metric,proto3" json:"metric,omitempty"`
	// The tile index, for example "1d-1234"
	Index                string   `protobuf:"bytes,4,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TileRequest) Reset()         { *m = TileRequest{} }
func (m *TileRequest) String() string { return proto.CompactTextString(m) }
func (*TileRequest) ProtoMessage()    {}
func (*TileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{13}
}

func (m *TileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TileRequest.Unmarshal(m, b)
}
func (m *TileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TileRequest.Marshal(b, m, deterministic)
}
func (m *TileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TileRequest.Merge(m, src)
}
func (m *TileRequest) XXX_Size() int {
	return xxx_messageInfo_TileRequest.Size(m)
}
func (m *TileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TileRequest proto.InternalMessageInfo

func (m *TileRequest) GetNamespace() *Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *TileRequest) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *TileRequest) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *TileRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type OrganizationListRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrganizationListRequest) Reset()         { *m = OrganizationListRequest{} }
func (m *OrganizationListRequest) String() string { return proto.CompactTextString(m) }
func (*OrganizationListRequest) ProtoMessage()    {}
func (*OrganizationListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{14}
}

func (m *OrganizationListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrganizationListRequest.Unmarshal(m, b)
}
func (m *OrganizationListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrganizationListRequest.Marshal(b, m, deterministic)
}
func (m *OrganizationListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationListRequest.Merge(m, src)
}
func (m *OrganizationListRequest) XXX_Size() int {
	return xxx_messageInfo_OrganizationListRequest.Size(m)
}
func (m *OrganizationListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationListRequest proto.InternalMessageInfo

type OrganizationRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrganizationRequest) Reset()         { *m = OrganizationRequest{} }
func (m *OrganizationRequest) String() string { return proto.CompactTextString(m) }
func (*OrganizationRequest) ProtoMessage()    {}
func (*OrganizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{15}
}

func (m *OrganizationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrganizationRequest.Unmarshal(m, b)
}
func (m *OrganizationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrganizationRequest.Marshal(b, m, deterministic)
}
func (m *OrganizationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationRequest.Merge(m, src)
}
func (m *OrganizationRequest) XXX_Size() int {
	return xxx_messageInfo_OrganizationRequest.Size(m)
}
func (m *OrganizationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationRequest proto.InternalMessageInfo

func (m *OrganizationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CollectionListRequest struct {
	// The short name of the Organization containing the Collections
	Organization         string   `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectionListRequest) Reset()         { *m = CollectionListRequest{} }
func (m *CollectionListRequest) String() string { return proto.CompactTextString(m) }
func (*CollectionListRequest) ProtoMessage()    {}
func (*CollectionListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{16}
}

func (m *CollectionListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectionListRequest.Unmarshal(m, b)
}
func (m *CollectionListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectionListRequest.Marshal(b, m, deterministic)
}
func (m *CollectionListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionListRequest.Merge(m, src)
}
func (m *CollectionListRequest) XXX_Size() int {
	return xxx_messageInfo_CollectionListRequest.Size(m)
}
func (m *CollectionListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionListRequest proto.InternalMessageInfo

func (m *CollectionListRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

type CollectionRequest struct {
	// The Organization to look up the Collection in
	Organization string `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	// The short name of the Collection
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectionRequest) Reset()         { *m = CollectionRequest{} }
func (m *CollectionRequest) String() string { return proto.CompactTextString(m) }
func (*CollectionRequest) ProtoMessage()    {}
func (*CollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{17}
}

func (m *CollectionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectionRequest.Unmarshal(m, b)
}
func (m *CollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectionRequest.Marshal(b, m, deterministic)
}
func (m *CollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionRequest.Merge(m, src)
}
func (m *CollectionRequest) XXX_Size() int {
	return xxx_messageInfo_CollectionRequest.Size(m)
}
func (m *CollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionRequest proto.InternalMessageInfo

func (m *CollectionRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *CollectionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateSourceRequest struct {
	// The namespace containing the Source
	Namespace *Namespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The index of the Source, which should be unique, and is how the source is referred to within ingest events
	Index int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	// The relative priority of the Source used to merge events
	Priority int32 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	// A human friendly escription of the Source and what it represents
	Description          string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateSourceRequest) Reset()         { *m = CreateSourceRequest{} }
func (m *CreateSourceRequest) String() string { return proto.CompactTextString(m) }
func (*CreateSourceRequest) ProtoMessage()    {}
func (*CreateSourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{18}
}

func (m *CreateSourceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateSourceRequest.Unmarshal(m, b)
}
func (m *CreateSourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateSourceRequest.Marshal(b, m, deterministic)
}
func (m *CreateSourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSourceRequest.Merge(m, src)
}
func (m *CreateSourceRequest) XXX_Size() int {
	return xxx_messageInfo_CreateSourceRequest.Size(m)
}
func (m *CreateSourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSourceRequest proto.InternalMessageInfo

func (m *CreateSourceRequest) GetNamespace() *Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *CreateSourceRequest) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CreateSourceRequest) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *CreateSourceRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type ChangeSourcePriorityRequest struct {
	// The namespace containing the Source
	Namespace *Namespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The index of the Source to update
	Index int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	// The new relative priority of the Source
	Priority             int32    `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeSourcePriorityRequest) Reset()         { *m = ChangeSourcePriorityRequest{} }
func (m *ChangeSourcePriorityRequest) String() string { return proto.CompactTextString(m) }
func (*ChangeSourcePriorityRequest) ProtoMessage()    {}
func (*ChangeSourcePriorityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{19}
}

func (m *ChangeSourcePriorityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeSourcePriorityRequest.Unmarshal(m, b)
}
func (m *ChangeSourcePriorityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeSourcePriorityRequest.Marshal(b, m, deterministic)
}
func (m *ChangeSourcePriorityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeSourcePriorityRequest.Merge(m, src)
}
func (m *ChangeSourcePriorityRequest) XXX_Size() int {
	return xxx_messageInfo_ChangeSourcePriorityRequest.Size(m)
}
func (m *ChangeSourcePriorityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeSourcePriorityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeSourcePriorityRequest proto.InternalMessageInfo

func (m *ChangeSourcePriorityRequest) GetNamespace() *Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *ChangeSourcePriorityRequest) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ChangeSourcePriorityRequest) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type SourceListRequest struct {
	Namespace            *Namespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SourceListRequest) Reset()         { *m = SourceListRequest{} }
func (m *SourceListRequest) String() string { return proto.CompactTextString(m) }
func (*SourceListRequest) ProtoMessage()    {}
func (*SourceListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{20}
}

func (m *SourceListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SourceListRequest.Unmarshal(m, b)
}
func (m *SourceListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SourceListRequest.Marshal(b, m, deterministic)
}
func (m *SourceListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceListRequest.Merge(m, src)
}
func (m *SourceListRequest) XXX_Size() int {
	return xxx_messageInfo_SourceListRequest.Size(m)
}
func (m *SourceListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SourceListRequest proto.InternalMessageInfo

func (m *SourceListRequest) GetNamespace() *Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

type SourceRequest struct {
	// The Organization and Collection of the source
	Namespace *Namespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The index of the Source
	Index                string   `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SourceRequest) Reset()         { *m = SourceRequest{} }
func (m *SourceRequest) String() string { return proto.CompactTextString(m) }
func (*SourceRequest) ProtoMessage()    {}
func (*SourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{21}
}

func (m *SourceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SourceRequest.Unmarshal(m, b)
}
func (m *SourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SourceRequest.Marshal(b, m, deterministic)
}
func (m *SourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceRequest.Merge(m, src)
}
func (m *SourceRequest) XXX_Size() int {
	return xxx_messageInfo_SourceRequest.Size(m)
}
func (m *SourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SourceRequest proto.InternalMessageInfo

func (m *SourceRequest) GetNamespace() *Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *SourceRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type DeleteSourceRequest struct {
	// The namespace containing the Source
	Namespace *Namespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The index of the Source to delete
	Index                int32    `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteSourceRequest) Reset()         { *m = DeleteSourceRequest{} }
func (m *DeleteSourceRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteSourceRequest) ProtoMessage()    {}
func (*DeleteSourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{22}
}

func (m *DeleteSourceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteSourceRequest.Unmarshal(m, b)
}
func (m *DeleteSourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteSourceRequest.Marshal(b, m, deterministic)
}
func (m *DeleteSourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSourceRequest.Merge(m, src)
}
func (m *DeleteSourceRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteSourceRequest.Size(m)
}
func (m *DeleteSourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSourceRequest proto.InternalMessageInfo

func (m *DeleteSourceRequest) GetNamespace() *Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *DeleteSourceRequest) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type MetricSpecsRequest struct {
	// The namespace to request the Metrics Specs within
	Namespace            *Namespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MetricSpecsRequest) Reset()         { *m = MetricSpecsRequest{} }
func (m *MetricSpecsRequest) String() string { return proto.CompactTextString(m) }
func (*MetricSpecsRequest) ProtoMessage()    {}
func (*MetricSpecsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{23}
}

func (m *MetricSpecsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricSpecsRequest.Unmarshal(m, b)
}
func (m *MetricSpecsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricSpecsRequest.Marshal(b, m, deterministic)
}
func (m *MetricSpecsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricSpecsRequest.Merge(m, src)
}
func (m *MetricSpecsRequest) XXX_Size() int {
	return xxx_messageInfo_MetricSpecsRequest.Size(m)
}
func (m *MetricSpecsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricSpecsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetricSpecsRequest proto.InternalMessageInfo

func (m *MetricSpecsRequest) GetNamespace() *Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

type MetricSpecRequest struct {
	// The namespace containing the Metric
	Namespace *Namespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The index of the Metric Spec to fetch
	Index                int32    `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricSpecRequest) Reset()         { *m = MetricSpecRequest{} }
func (m *MetricSpecRequest) String() string { return proto.CompactTextString(m) }
func (*MetricSpecRequest) ProtoMessage()    {}
func (*MetricSpecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{24}
}

func (m *MetricSpecRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricSpecRequest.Unmarshal(m, b)
}
func (m *MetricSpecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricSpecRequest.Marshal(b, m, deterministic)
}
func (m *MetricSpecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricSpecRequest.Merge(m, src)
}
func (m *MetricSpecRequest) XXX_Size() int {
	return xxx_messageInfo_MetricSpecRequest.Size(m)
}
func (m *MetricSpecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricSpecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetricSpecRequest proto.InternalMessageInfo

func (m *MetricSpecRequest) GetNamespace() *Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *MetricSpecRequest) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type RegisterMetricSpecRequest struct {
	// The namespace to register the Metric Spec within
	Namespace *Namespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The scope wildcard which determines which Resources the Metric will apply to.
	// e.g. "devices/*/interfaces/*"
	Scope string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	// The base name of the metric e.g. "traffic"
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The suffic of the metric e.g. "in" or "out"
	Suffix string `protobuf:"bytes,4,opt,name=suffix,proto3" json:"suffix,omitempty"`
	// The alignment of the data to periodic boundaries e.g. "30s" or "5m"
	Align string `protobuf:"bytes,5,opt,name=align,proto3" json:"align,omitempty"`
	// Units, applicable to counter and gauge types. For counter types the output rates
	// will be ${units}/s and for gauges the output units will just be ${units}. For example
	// a counter of errors my have units "errors" and will output "errors/sec", while a
	// temperature gauge may have units "deg C" which will be its output units as well
	Units                string   `protobuf:"bytes,6,opt,name=units,proto3" json:"units,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterMetricSpecRequest) Reset()         { *m = RegisterMetricSpecRequest{} }
func (m *RegisterMetricSpecRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterMetricSpecRequest) ProtoMessage()    {}
func (*RegisterMetricSpecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{25}
}

func (m *RegisterMetricSpecRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterMetricSpecRequest.Unmarshal(m, b)
}
func (m *RegisterMetricSpecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterMetricSpecRequest.Marshal(b, m, deterministic)
}
func (m *RegisterMetricSpecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterMetricSpecRequest.Merge(m, src)
}
func (m *RegisterMetricSpecRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterMetricSpecRequest.Size(m)
}
func (m *RegisterMetricSpecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterMetricSpecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterMetricSpecRequest proto.InternalMessageInfo

func (m *RegisterMetricSpecRequest) GetNamespace() *Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *RegisterMetricSpecRequest) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *RegisterMetricSpecRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegisterMetricSpecRequest) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

func (m *RegisterMetricSpecRequest) GetAlign() string {
	if m != nil {
		return m.Align
	}
	return ""
}

func (m *RegisterMetricSpecRequest) GetUnits() string {
	if m != nil {
		return m.Units
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "netbeam.Empty")
	proto.RegisterType((*Namespace)(nil), "netbeam.Namespace")
	proto.RegisterType((*Resource)(nil), "netbeam.Resource")
	proto.RegisterType((*Organization)(nil), "netbeam.Organization")
	proto.RegisterType((*OrganizationList)(nil), "netbeam.OrganizationList")
	proto.RegisterType((*Collection)(nil), "netbeam.Collection")
	proto.RegisterType((*CollectionList)(nil), "netbeam.CollectionList")
	proto.RegisterType((*Source)(nil), "netbeam.Source")
	proto.RegisterType((*SourceList)(nil), "netbeam.SourceList")
	proto.RegisterType((*MetricSpec)(nil), "netbeam.MetricSpec")
	proto.RegisterType((*MetricSpecList)(nil), "netbeam.MetricSpecList")
	proto.RegisterType((*HelloRequest)(nil), "netbeam.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "netbeam.HelloReply")
	proto.RegisterType((*TileRequest)(nil), "netbeam.TileRequest")
	proto.RegisterType((*OrganizationListRequest)(nil), "netbeam.OrganizationListRequest")
	proto.RegisterType((*OrganizationRequest)(nil), "netbeam.OrganizationRequest")
	proto.RegisterType((*CollectionListRequest)(nil), "netbeam.CollectionListRequest")
	proto.RegisterType((*CollectionRequest)(nil), "netbeam.CollectionRequest")
	proto.RegisterType((*CreateSourceRequest)(nil), "netbeam.CreateSourceRequest")
	proto.RegisterType((*ChangeSourcePriorityRequest)(nil), "netbeam.ChangeSourcePriorityRequest")
	proto.RegisterType((*SourceListRequest)(nil), "netbeam.SourceListRequest")
	proto.RegisterType((*SourceRequest)(nil), "netbeam.SourceRequest")
	proto.RegisterType((*DeleteSourceRequest)(nil), "netbeam.DeleteSourceRequest")
	proto.RegisterType((*MetricSpecsRequest)(nil), "netbeam.MetricSpecsRequest")
	proto.RegisterType((*MetricSpecRequest)(nil), "netbeam.MetricSpecRequest")
	proto.RegisterType((*RegisterMetricSpecRequest)(nil), "netbeam.RegisterMetricSpecRequest")
}

func init() { proto.RegisterFile("netbeam.proto", fileDescriptor_38d69b4fdff410ff) }

var fileDescriptor_38d69b4fdff410ff = []byte{
	// 1017 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x5f, 0x6f, 0x1b, 0x45,
	0x10, 0xbf, 0x4b, 0xfc, 0x27, 0x1e, 0x3b, 0x7f, 0xbc, 0x4e, 0x5a, 0xc7, 0x45, 0x51, 0x58, 0x90,
	0x68, 0x1f, 0x48, 0x50, 0x50, 0x01, 0x11, 0x09, 0x50, 0x42, 0xeb, 0x0a, 0x4a, 0x5d, 0xce, 0x41,
	0x48, 0x20, 0x1e, 0x2e, 0xe7, 0xe9, 0x65, 0xa5, 0xfb, 0xc7, 0xed, 0x5a, 0xaa, 0x79, 0xe3, 0x73,
	0x80, 0xf8, 0x22, 0xbc, 0xf0, 0xc8, 0xc7, 0x42, 0xb7, 0xbb, 0x77, 0xb7, 0xb6, 0xcf, 0x55, 0x48,
	0x02, 0x6f, 0xb7, 0xb3, 0x33, 0xbf, 0xfd, 0xcd, 0xec, 0xce, 0x4f, 0x73, 0xb0, 0x19, 0xa1, 0xb8,
	0x44, 0x37, 0x3c, 0x4a, 0xd2, 0x58, 0xc4, 0xa4, 0xa9, 0x97, 0x03, 0x48, 0xe2, 0x68, 0xa2, 0x8c,
	0xb4, 0x09, 0xf5, 0x27, 0x61, 0x22, 0x66, 0x74, 0x04, 0xad, 0x17, 0x6e, 0x88, 0x3c, 0x71, 0x3d,
	0x24, 0x14, 0x3a, 0x71, 0xea, 0xbb, 0x11, 0xfb, 0xc5, 0x15, 0x2c, 0x8e, 0xfa, 0xf6, 0xa1, 0xfd,
	0xb0, 0xe5, 0xcc, 0xd9, 0xc8, 0x01, 0x80, 0x17, 0x07, 0x01, 0x7a, 0xd2, 0x63, 0x4d, 0x7a, 0x18,
	0x16, 0x7a, 0x00, 0x1b, 0x0e, 0xf2, 0x78, 0x9a, 0x7a, 0x48, 0x08, 0xd4, 0x12, 0x57, 0x5c, 0xf5,
	0xed, 0xc3, 0xf5, 0x87, 0x2d, 0x47, 0x7e, 0xd3, 0x0b, 0xe8, 0x8c, 0x4c, 0xbc, 0x2d, 0x58, 0x63,
	0x13, 0x79, 0x52, 0xdd, 0x59, 0x63, 0x93, 0x2c, 0x26, 0x72, 0x43, 0xd4, 0xc8, 0xf2, 0x9b, 0x1c,
	0x42, 0x7b, 0x82, 0xdc, 0x4b, 0x59, 0x22, 0x0f, 0x5d, 0x97, 0x5b, 0xa6, 0x89, 0x8e, 0x60, 0xc7,
	0x44, 0x7d, 0xce, 0xb8, 0x20, 0xa7, 0xb0, 0x69, 0x32, 0xe7, 0x92, 0x46, 0xfb, 0x64, 0xef, 0x28,
	0xaf, 0x8f, 0x19, 0xe1, 0xcc, 0xfb, 0xd2, 0x04, 0xe0, 0xbc, 0x48, 0x6a, 0x89, 0xe4, 0x07, 0xd0,
	0x8a, 0xf2, 0xaa, 0x49, 0xa6, 0xed, 0x13, 0x52, 0xc0, 0x16, 0xf5, 0x74, 0x4a, 0xa7, 0x6b, 0xa4,
	0x30, 0x84, 0xad, 0xf2, 0x44, 0x99, 0xc0, 0x63, 0x68, 0x97, 0x85, 0xcd, 0xe9, 0xf7, 0x8a, 0x73,
	0x4a, 0x6f, 0xc7, 0xf4, 0xa3, 0x7f, 0xd8, 0xd0, 0x18, 0xab, 0x0b, 0xb8, 0x3d, 0xef, 0x5d, 0xa8,
	0xb3, 0x68, 0x82, 0xaf, 0x25, 0xe3, 0xba, 0xa3, 0x16, 0x64, 0x00, 0x1b, 0x49, 0xca, 0xe2, 0x94,
	0x89, 0x59, 0xbf, 0x26, 0x37, 0x8a, 0xf5, 0x62, 0xa6, 0xf5, 0xe5, 0x4c, 0x3f, 0x06, 0x50, 0xfc,
	0x64, 0x96, 0x8f, 0xa0, 0xa9, 0x9e, 0x4b, 0x9e, 0xe1, 0x76, 0xc1, 0x48, 0x79, 0x39, 0xf9, 0x3e,
	0xfd, 0xcb, 0x06, 0xf8, 0x06, 0x45, 0xca, 0xbc, 0x71, 0x82, 0xde, 0x7c, 0x36, 0xf6, 0x75, 0xb2,
	0x21, 0x50, 0x13, 0xb3, 0xa4, 0x78, 0x5c, 0xd9, 0x77, 0x96, 0x21, 0xf7, 0xe2, 0x04, 0xf5, 0x9d,
	0xa8, 0x45, 0xf1, 0x0c, 0x6b, 0xc6, 0x33, 0xbc, 0x07, 0x0d, 0x3e, 0x7d, 0xf5, 0x8a, 0xbd, 0xd6,
	0x49, 0xe9, 0x55, 0x86, 0xe0, 0x06, 0xcc, 0x8f, 0xfa, 0x0d, 0x85, 0x20, 0x17, 0x99, 0x75, 0x1a,
	0x31, 0xc1, 0xfb, 0x4d, 0x65, 0x95, 0x0b, 0x7a, 0x0a, 0x5b, 0x65, 0x06, 0x3a, 0xff, 0x3a, 0x4f,
	0xd0, 0x5b, 0xbe, 0xdf, 0xd2, 0xcf, 0x51, 0x1e, 0x94, 0x42, 0xe7, 0x19, 0x06, 0x41, 0xec, 0xe0,
	0xcf, 0x53, 0xe4, 0xa2, 0x20, 0x69, 0x97, 0x24, 0xe9, 0x08, 0x40, 0xfb, 0x24, 0xc1, 0x8c, 0xf4,
	0xa1, 0x19, 0x22, 0xe7, 0xae, 0x9f, 0x3b, 0xe5, 0x4b, 0xf2, 0x1e, 0x34, 0x04, 0x17, 0x6e, 0x98,
	0xe8, 0x77, 0xb0, 0x7d, 0x24, 0xe5, 0xe1, 0x82, 0x85, 0x28, 0xcd, 0x8e, 0xde, 0xa6, 0xbf, 0xdb,
	0xd0, 0xbe, 0x60, 0x01, 0xe6, 0x87, 0xfe, 0xfb, 0xaa, 0xbf, 0x0f, 0x1b, 0xa9, 0x96, 0x04, 0x7d,
	0x58, 0xb7, 0x08, 0xc8, 0xb5, 0xc2, 0x29, 0x5c, 0xb2, 0x32, 0x87, 0x32, 0x75, 0x7d, 0x23, 0x7a,
	0x55, 0x3e, 0x45, 0x75, 0x27, 0x6a, 0x41, 0xf7, 0xe1, 0xfe, 0x62, 0xe7, 0x6b, 0xa6, 0xf4, 0x11,
	0xf4, 0xe6, 0x5a, 0xfc, 0x0d, 0x55, 0x3b, 0x85, 0xbd, 0xf9, 0xe6, 0xcb, 0x9d, 0xaf, 0x21, 0x89,
	0xf4, 0x6b, 0xe8, 0x1a, 0xbd, 0x78, 0xfd, 0xc0, 0x2a, 0xad, 0xa3, 0xbf, 0xd9, 0xd0, 0x3b, 0x4f,
	0xd1, 0x15, 0xa8, 0x5f, 0xff, 0x8d, 0xcb, 0x5e, 0xd4, 0x6b, 0x6d, 0x55, 0xeb, 0xae, 0xbf, 0xb9,
	0x75, 0x6b, 0xcb, 0xad, 0xfb, 0xab, 0x0d, 0x0f, 0xce, 0xaf, 0xdc, 0xc8, 0xd7, 0xec, 0x5e, 0xea,
	0xd0, 0xff, 0x91, 0x25, 0x7d, 0x02, 0xdd, 0x52, 0x3e, 0x6e, 0x7c, 0x30, 0xfd, 0x1e, 0x36, 0xef,
	0xb4, 0xc2, 0xc5, 0x8b, 0xfc, 0x09, 0x7a, 0x5f, 0x62, 0x80, 0xff, 0xd1, 0x05, 0xd2, 0xa7, 0x40,
	0x4a, 0x65, 0xe0, 0x37, 0xcf, 0xff, 0x47, 0xe8, 0x1a, 0x0a, 0x73, 0xc7, 0x24, 0xff, 0xb4, 0x61,
	0xdf, 0x41, 0x9f, 0x71, 0x81, 0xe9, 0x1d, 0x9d, 0xa2, 0x44, 0x7a, 0xad, 0x4a, 0xa4, 0xd7, 0x2b,
	0x45, 0xba, 0x56, 0x2d, 0xd2, 0xf5, 0x4a, 0x91, 0x6e, 0x18, 0x22, 0x7d, 0xf2, 0x77, 0x0b, 0x9a,
	0x2f, 0x14, 0x1d, 0xf2, 0x09, 0x6c, 0x8c, 0xdd, 0x99, 0x94, 0x54, 0x52, 0x8e, 0x0e, 0xa6, 0x0c,
	0x0f, 0x7a, 0x8b, 0xe6, 0x24, 0x98, 0x51, 0x8b, 0x3c, 0x86, 0xd6, 0x53, 0x14, 0xde, 0x55, 0x26,
	0x9e, 0x64, 0xb7, 0xf0, 0x31, 0xb4, 0x74, 0xb0, 0x53, 0x8a, 0xee, 0x18, 0x53, 0x86, 0x9c, 0x5a,
	0xc4, 0x81, 0x6e, 0xf6, 0xb0, 0x4d, 0xe5, 0xe2, 0xe4, 0xb0, 0x72, 0x68, 0x31, 0x1a, 0x60, 0xb0,
	0xbf, 0xd2, 0x83, 0x5a, 0xe4, 0x19, 0x6c, 0x0f, 0x71, 0x0e, 0x92, 0xbc, 0x55, 0x3d, 0x06, 0x69,
	0xb4, 0xea, 0x21, 0x89, 0x5a, 0xe4, 0x39, 0x6c, 0x67, 0x98, 0xa5, 0xde, 0x71, 0x72, 0x50, 0x31,
	0x91, 0x98, 0xcc, 0xee, 0xaf, 0xd8, 0xa7, 0x16, 0x39, 0x83, 0xcd, 0x21, 0x1a, 0x60, 0x64, 0x50,
	0x35, 0xdd, 0x2c, 0x95, 0xb9, 0xdc, 0xa3, 0x16, 0xf9, 0x02, 0xda, 0x19, 0x9a, 0x6a, 0x36, 0x6e,
	0x20, 0x2c, 0x89, 0x84, 0x81, 0x50, 0xee, 0x51, 0x8b, 0x7c, 0x04, 0xad, 0x21, 0x6a, 0x00, 0x72,
	0x6f, 0x71, 0xfa, 0xd0, 0xb1, 0x8b, 0x53, 0x09, 0xb5, 0xc8, 0xe7, 0xd0, 0x31, 0x95, 0xda, 0x28,
	0x69, 0x85, 0x80, 0x57, 0x01, 0x8c, 0x60, 0xf7, 0xbb, 0x64, 0x52, 0x78, 0xe6, 0x62, 0x4a, 0xde,
	0x2d, 0x81, 0x56, 0x6b, 0x6d, 0x15, 0xe0, 0x67, 0xd0, 0x31, 0xa5, 0xc7, 0x60, 0x54, 0xa1, 0x48,
	0x83, 0xad, 0x62, 0x57, 0xfd, 0x0b, 0x58, 0xe4, 0x2b, 0xd8, 0xc9, 0x6a, 0xa2, 0x3a, 0x96, 0x4b,
	0x81, 0x21, 0x0f, 0x2a, 0x06, 0x12, 0xbe, 0x7c, 0xb7, 0xf3, 0x53, 0x0d, 0xb5, 0xc8, 0xa7, 0xb2,
	0xaa, 0xca, 0x6c, 0xdc, 0xca, 0x92, 0x1a, 0x54, 0x17, 0x86, 0xe4, 0xea, 0x71, 0x36, 0x13, 0xa8,
	0x41, 0xa8, 0x31, 0x35, 0xac, 0x90, 0x96, 0x41, 0xd5, 0xf8, 0x24, 0x9b, 0x6a, 0x2f, 0x8f, 0x39,
	0x8f, 0xa7, 0x51, 0x11, 0x7a, 0x1b, 0xcc, 0x97, 0xd0, 0xcb, 0x63, 0x86, 0xee, 0xd4, 0xbf, 0x03,
	0x96, 0xdf, 0xc2, 0x6e, 0x1e, 0x33, 0x16, 0x29, 0x8b, 0xfc, 0x5b, 0x43, 0x9e, 0xbd, 0xf3, 0xc3,
	0xdb, 0x3e, 0x13, 0x57, 0xd3, 0xcb, 0x23, 0x2f, 0x0e, 0x8f, 0x91, 0x47, 0x28, 0x8e, 0xe5, 0x2f,
	0xe0, 0xb1, 0x1f, 0x1f, 0xeb, 0x88, 0xcb, 0x86, 0xb4, 0x7c, 0xf8, 0x4f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xfc, 0x36, 0x5d, 0xae, 0x3a, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetbeamClient is the client API for Netbeam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetbeamClient interface {
	// Say hello to netbeam
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// Requests a tile from the netbeam core for a specific metric
	FetchTile(ctx context.Context, in *TileRequest, opts ...grpc.CallOption) (*pond.TimeSeries, error)
	// Request the list of Organizations registered with netbeam
	ListOrganizations(ctx context.Context, in *OrganizationListRequest, opts ...grpc.CallOption) (*OrganizationList, error)
	// Get a specific Organization by supplying it's short name
	GetOrganization(ctx context.Context, in *OrganizationRequest, opts ...grpc.CallOption) (*Organization, error)
	// Request the list of Collections within an Organization registered with netbeam
	ListCollections(ctx context.Context, in *CollectionListRequest, opts ...grpc.CallOption) (*CollectionList, error)
	// Get a specific Collection by supplying the Organization it is in as well as the Collection short name
	GetCollection(ctx context.Context, in *CollectionRequest, opts ...grpc.CallOption) (*Collection, error)
	// Request the list of all Sources within a Collection. The list will be returned in order of priority.
	ListSources(ctx context.Context, in *SourceListRequest, opts ...grpc.CallOption) (*SourceList, error)
	// Get a specific Source by supplying the Organization, Collection and the Source index
	GetSource(ctx context.Context, in *SourceRequest, opts ...grpc.CallOption) (*Source, error)
	// Registers a new Source with the Collection
	CreateSource(ctx context.Context, in *CreateSourceRequest, opts ...grpc.CallOption) (*Source, error)
	// Update the Source priority
	UpdateSourcePriority(ctx context.Context, in *ChangeSourcePriorityRequest, opts ...grpc.CallOption) (*Source, error)
	// Delete the Source
	DeleteSource(ctx context.Context, in *DeleteSourceRequest, opts ...grpc.CallOption) (*Empty, error)
	// Request a list of all Metrics Specs registered to the Collection
	ListMetricsSpecs(ctx context.Context, in *MetricSpecsRequest, opts ...grpc.CallOption) (*MetricSpecList, error)
	// Get a specific Source by supplying the Organization, Collection and the Source index
	GetMetric(ctx context.Context, in *MetricSpecRequest, opts ...grpc.CallOption) (*Source, error)
	// Register a Byte Counter Metric with netbeam
	RegisterByteMetric(ctx context.Context, in *RegisterMetricSpecRequest, opts ...grpc.CallOption) (*MetricSpec, error)
	// Register a Counter Metric with netbeam
	RegisterCounterMetric(ctx context.Context, in *RegisterMetricSpecRequest, opts ...grpc.CallOption) (*MetricSpec, error)
	// Register a Gauge Metric with netbeam
	RegisterGaugeMetric(ctx context.Context, in *RegisterMetricSpecRequest, opts ...grpc.CallOption) (*MetricSpec, error)
	// Register a String Metric with netbeam
	RegisterStringMetric(ctx context.Context, in *RegisterMetricSpecRequest, opts ...grpc.CallOption) (*MetricSpec, error)
}

type netbeamClient struct {
	cc *grpc.ClientConn
}

func NewNetbeamClient(cc *grpc.ClientConn) NetbeamClient {
	return &netbeamClient{cc}
}

func (c *netbeamClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/netbeam.Netbeam/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netbeamClient) FetchTile(ctx context.Context, in *TileRequest, opts ...grpc.CallOption) (*pond.TimeSeries, error) {
	out := new(pond.TimeSeries)
	err := c.cc.Invoke(ctx, "/netbeam.Netbeam/FetchTile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netbeamClient) ListOrganizations(ctx context.Context, in *OrganizationListRequest, opts ...grpc.CallOption) (*OrganizationList, error) {
	out := new(OrganizationList)
	err := c.cc.Invoke(ctx, "/netbeam.Netbeam/ListOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netbeamClient) GetOrganization(ctx context.Context, in *OrganizationRequest, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/netbeam.Netbeam/GetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netbeamClient) ListCollections(ctx context.Context, in *CollectionListRequest, opts ...grpc.CallOption) (*CollectionList, error) {
	out := new(CollectionList)
	err := c.cc.Invoke(ctx, "/netbeam.Netbeam/ListCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netbeamClient) GetCollection(ctx context.Context, in *CollectionRequest, opts ...grpc.CallOption) (*Collection, error) {
	out := new(Collection)
	err := c.cc.Invoke(ctx, "/netbeam.Netbeam/GetCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netbeamClient) ListSources(ctx context.Context, in *SourceListRequest, opts ...grpc.CallOption) (*SourceList, error) {
	out := new(SourceList)
	err := c.cc.Invoke(ctx, "/netbeam.Netbeam/ListSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netbeamClient) GetSource(ctx context.Context, in *SourceRequest, opts ...grpc.CallOption) (*Source, error) {
	out := new(Source)
	err := c.cc.Invoke(ctx, "/netbeam.Netbeam/GetSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netbeamClient) CreateSource(ctx context.Context, in *CreateSourceRequest, opts ...grpc.CallOption) (*Source, error) {
	out := new(Source)
	err := c.cc.Invoke(ctx, "/netbeam.Netbeam/CreateSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netbeamClient) UpdateSourcePriority(ctx context.Context, in *ChangeSourcePriorityRequest, opts ...grpc.CallOption) (*Source, error) {
	out := new(Source)
	err := c.cc.Invoke(ctx, "/netbeam.Netbeam/UpdateSourcePriority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netbeamClient) DeleteSource(ctx context.Context, in *DeleteSourceRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/netbeam.Netbeam/DeleteSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netbeamClient) ListMetricsSpecs(ctx context.Context, in *MetricSpecsRequest, opts ...grpc.CallOption) (*MetricSpecList, error) {
	out := new(MetricSpecList)
	err := c.cc.Invoke(ctx, "/netbeam.Netbeam/ListMetricsSpecs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netbeamClient) GetMetric(ctx context.Context, in *MetricSpecRequest, opts ...grpc.CallOption) (*Source, error) {
	out := new(Source)
	err := c.cc.Invoke(ctx, "/netbeam.Netbeam/GetMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netbeamClient) RegisterByteMetric(ctx context.Context, in *RegisterMetricSpecRequest, opts ...grpc.CallOption) (*MetricSpec, error) {
	out := new(MetricSpec)
	err := c.cc.Invoke(ctx, "/netbeam.Netbeam/RegisterByteMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netbeamClient) RegisterCounterMetric(ctx context.Context, in *RegisterMetricSpecRequest, opts ...grpc.CallOption) (*MetricSpec, error) {
	out := new(MetricSpec)
	err := c.cc.Invoke(ctx, "/netbeam.Netbeam/RegisterCounterMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netbeamClient) RegisterGaugeMetric(ctx context.Context, in *RegisterMetricSpecRequest, opts ...grpc.CallOption) (*MetricSpec, error) {
	out := new(MetricSpec)
	err := c.cc.Invoke(ctx, "/netbeam.Netbeam/RegisterGaugeMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netbeamClient) RegisterStringMetric(ctx context.Context, in *RegisterMetricSpecRequest, opts ...grpc.CallOption) (*MetricSpec, error) {
	out := new(MetricSpec)
	err := c.cc.Invoke(ctx, "/netbeam.Netbeam/RegisterStringMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetbeamServer is the server API for Netbeam service.
type NetbeamServer interface {
	// Say hello to netbeam
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	// Requests a tile from the netbeam core for a specific metric
	FetchTile(context.Context, *TileRequest) (*pond.TimeSeries, error)
	// Request the list of Organizations registered with netbeam
	ListOrganizations(context.Context, *OrganizationListRequest) (*OrganizationList, error)
	// Get a specific Organization by supplying it's short name
	GetOrganization(context.Context, *OrganizationRequest) (*Organization, error)
	// Request the list of Collections within an Organization registered with netbeam
	ListCollections(context.Context, *CollectionListRequest) (*CollectionList, error)
	// Get a specific Collection by supplying the Organization it is in as well as the Collection short name
	GetCollection(context.Context, *CollectionRequest) (*Collection, error)
	// Request the list of all Sources within a Collection. The list will be returned in order of priority.
	ListSources(context.Context, *SourceListRequest) (*SourceList, error)
	// Get a specific Source by supplying the Organization, Collection and the Source index
	GetSource(context.Context, *SourceRequest) (*Source, error)
	// Registers a new Source with the Collection
	CreateSource(context.Context, *CreateSourceRequest) (*Source, error)
	// Update the Source priority
	UpdateSourcePriority(context.Context, *ChangeSourcePriorityRequest) (*Source, error)
	// Delete the Source
	DeleteSource(context.Context, *DeleteSourceRequest) (*Empty, error)
	// Request a list of all Metrics Specs registered to the Collection
	ListMetricsSpecs(context.Context, *MetricSpecsRequest) (*MetricSpecList, error)
	// Get a specific Source by supplying the Organization, Collection and the Source index
	GetMetric(context.Context, *MetricSpecRequest) (*Source, error)
	// Register a Byte Counter Metric with netbeam
	RegisterByteMetric(context.Context, *RegisterMetricSpecRequest) (*MetricSpec, error)
	// Register a Counter Metric with netbeam
	RegisterCounterMetric(context.Context, *RegisterMetricSpecRequest) (*MetricSpec, error)
	// Register a Gauge Metric with netbeam
	RegisterGaugeMetric(context.Context, *RegisterMetricSpecRequest) (*MetricSpec, error)
	// Register a String Metric with netbeam
	RegisterStringMetric(context.Context, *RegisterMetricSpecRequest) (*MetricSpec, error)
}

// UnimplementedNetbeamServer can be embedded to have forward compatible implementations.
type UnimplementedNetbeamServer struct {
}

func (*UnimplementedNetbeamServer) SayHello(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedNetbeamServer) FetchTile(ctx context.Context, req *TileRequest) (*pond.TimeSeries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTile not implemented")
}
func (*UnimplementedNetbeamServer) ListOrganizations(ctx context.Context, req *OrganizationListRequest) (*OrganizationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (*UnimplementedNetbeamServer) GetOrganization(ctx context.Context, req *OrganizationRequest) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (*UnimplementedNetbeamServer) ListCollections(ctx context.Context, req *CollectionListRequest) (*CollectionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollections not implemented")
}
func (*UnimplementedNetbeamServer) GetCollection(ctx context.Context, req *CollectionRequest) (*Collection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollection not implemented")
}
func (*UnimplementedNetbeamServer) ListSources(ctx context.Context, req *SourceListRequest) (*SourceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSources not implemented")
}
func (*UnimplementedNetbeamServer) GetSource(ctx context.Context, req *SourceRequest) (*Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSource not implemented")
}
func (*UnimplementedNetbeamServer) CreateSource(ctx context.Context, req *CreateSourceRequest) (*Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSource not implemented")
}
func (*UnimplementedNetbeamServer) UpdateSourcePriority(ctx context.Context, req *ChangeSourcePriorityRequest) (*Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSourcePriority not implemented")
}
func (*UnimplementedNetbeamServer) DeleteSource(ctx context.Context, req *DeleteSourceRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSource not implemented")
}
func (*UnimplementedNetbeamServer) ListMetricsSpecs(ctx context.Context, req *MetricSpecsRequest) (*MetricSpecList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMetricsSpecs not implemented")
}
func (*UnimplementedNetbeamServer) GetMetric(ctx context.Context, req *MetricSpecRequest) (*Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetric not implemented")
}
func (*UnimplementedNetbeamServer) RegisterByteMetric(ctx context.Context, req *RegisterMetricSpecRequest) (*MetricSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterByteMetric not implemented")
}
func (*UnimplementedNetbeamServer) RegisterCounterMetric(ctx context.Context, req *RegisterMetricSpecRequest) (*MetricSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCounterMetric not implemented")
}
func (*UnimplementedNetbeamServer) RegisterGaugeMetric(ctx context.Context, req *RegisterMetricSpecRequest) (*MetricSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGaugeMetric not implemented")
}
func (*UnimplementedNetbeamServer) RegisterStringMetric(ctx context.Context, req *RegisterMetricSpecRequest) (*MetricSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterStringMetric not implemented")
}

func RegisterNetbeamServer(s *grpc.Server, srv NetbeamServer) {
	s.RegisterService(&_Netbeam_serviceDesc, srv)
}

func _Netbeam_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetbeamServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netbeam.Netbeam/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetbeamServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Netbeam_FetchTile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetbeamServer).FetchTile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netbeam.Netbeam/FetchTile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetbeamServer).FetchTile(ctx, req.(*TileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Netbeam_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetbeamServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netbeam.Netbeam/ListOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetbeamServer).ListOrganizations(ctx, req.(*OrganizationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Netbeam_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetbeamServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netbeam.Netbeam/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetbeamServer).GetOrganization(ctx, req.(*OrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Netbeam_ListCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetbeamServer).ListCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netbeam.Netbeam/ListCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetbeamServer).ListCollections(ctx, req.(*CollectionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Netbeam_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetbeamServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netbeam.Netbeam/GetCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetbeamServer).GetCollection(ctx, req.(*CollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Netbeam_ListSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetbeamServer).ListSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netbeam.Netbeam/ListSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetbeamServer).ListSources(ctx, req.(*SourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Netbeam_GetSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetbeamServer).GetSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netbeam.Netbeam/GetSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetbeamServer).GetSource(ctx, req.(*SourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Netbeam_CreateSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetbeamServer).CreateSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netbeam.Netbeam/CreateSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetbeamServer).CreateSource(ctx, req.(*CreateSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Netbeam_UpdateSourcePriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSourcePriorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetbeamServer).UpdateSourcePriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netbeam.Netbeam/UpdateSourcePriority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetbeamServer).UpdateSourcePriority(ctx, req.(*ChangeSourcePriorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Netbeam_DeleteSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetbeamServer).DeleteSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netbeam.Netbeam/DeleteSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetbeamServer).DeleteSource(ctx, req.(*DeleteSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Netbeam_ListMetricsSpecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricSpecsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetbeamServer).ListMetricsSpecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netbeam.Netbeam/ListMetricsSpecs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetbeamServer).ListMetricsSpecs(ctx, req.(*MetricSpecsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Netbeam_GetMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetbeamServer).GetMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netbeam.Netbeam/GetMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetbeamServer).GetMetric(ctx, req.(*MetricSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Netbeam_RegisterByteMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMetricSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetbeamServer).RegisterByteMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netbeam.Netbeam/RegisterByteMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetbeamServer).RegisterByteMetric(ctx, req.(*RegisterMetricSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Netbeam_RegisterCounterMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMetricSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetbeamServer).RegisterCounterMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netbeam.Netbeam/RegisterCounterMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetbeamServer).RegisterCounterMetric(ctx, req.(*RegisterMetricSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Netbeam_RegisterGaugeMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMetricSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetbeamServer).RegisterGaugeMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netbeam.Netbeam/RegisterGaugeMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetbeamServer).RegisterGaugeMetric(ctx, req.(*RegisterMetricSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Netbeam_RegisterStringMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMetricSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetbeamServer).RegisterStringMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netbeam.Netbeam/RegisterStringMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetbeamServer).RegisterStringMetric(ctx, req.(*RegisterMetricSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Netbeam_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netbeam.Netbeam",
	HandlerType: (*NetbeamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Netbeam_SayHello_Handler,
		},
		{
			MethodName: "FetchTile",
			Handler:    _Netbeam_FetchTile_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _Netbeam_ListOrganizations_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _Netbeam_GetOrganization_Handler,
		},
		{
			MethodName: "ListCollections",
			Handler:    _Netbeam_ListCollections_Handler,
		},
		{
			MethodName: "GetCollection",
			Handler:    _Netbeam_GetCollection_Handler,
		},
		{
			MethodName: "ListSources",
			Handler:    _Netbeam_ListSources_Handler,
		},
		{
			MethodName: "GetSource",
			Handler:    _Netbeam_GetSource_Handler,
		},
		{
			MethodName: "CreateSource",
			Handler:    _Netbeam_CreateSource_Handler,
		},
		{
			MethodName: "UpdateSourcePriority",
			Handler:    _Netbeam_UpdateSourcePriority_Handler,
		},
		{
			MethodName: "DeleteSource",
			Handler:    _Netbeam_DeleteSource_Handler,
		},
		{
			MethodName: "ListMetricsSpecs",
			Handler:    _Netbeam_ListMetricsSpecs_Handler,
		},
		{
			MethodName: "GetMetric",
			Handler:    _Netbeam_GetMetric_Handler,
		},
		{
			MethodName: "RegisterByteMetric",
			Handler:    _Netbeam_RegisterByteMetric_Handler,
		},
		{
			MethodName: "RegisterCounterMetric",
			Handler:    _Netbeam_RegisterCounterMetric_Handler,
		},
		{
			MethodName: "RegisterGaugeMetric",
			Handler:    _Netbeam_RegisterGaugeMetric_Handler,
		},
		{
			MethodName: "RegisterStringMetric",
			Handler:    _Netbeam_RegisterStringMetric_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "netbeam.proto",
}
