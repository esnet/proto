// Code generated by protoc-gen-go. DO NOT EDIT.
// source: netbeam.proto

package netbeam

import (
	context "context"
	fmt "fmt"
	pond "github.com/esnet/proto/go/pond"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type HelloRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{0}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type HelloReply struct {
	Message              string          `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Tstamp               *pond.Timestamp `protobuf:"bytes,2,opt,name=tstamp,proto3" json:"tstamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HelloReply) Reset()         { *m = HelloReply{} }
func (m *HelloReply) String() string { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()    {}
func (*HelloReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{1}
}

func (m *HelloReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloReply.Unmarshal(m, b)
}
func (m *HelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloReply.Marshal(b, m, deterministic)
}
func (m *HelloReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReply.Merge(m, src)
}
func (m *HelloReply) XXX_Size() int {
	return xxx_messageInfo_HelloReply.Size(m)
}
func (m *HelloReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReply.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReply proto.InternalMessageInfo

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *HelloReply) GetTstamp() *pond.Timestamp {
	if m != nil {
		return m.Tstamp
	}
	return nil
}

// The namespace, which is made up of the organization and the collection e.g. { organization: "esnet", collection: "prod"}
type Namespace struct {
	// The organization this request is associated with e.g. "esnet"
	Organization string `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	// The collection within the organization's data the request is for. e.g. "prod"
	Collection           string   `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Namespace) Reset()         { *m = Namespace{} }
func (m *Namespace) String() string { return proto.CompactTextString(m) }
func (*Namespace) ProtoMessage()    {}
func (*Namespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{2}
}

func (m *Namespace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Namespace.Unmarshal(m, b)
}
func (m *Namespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Namespace.Marshal(b, m, deterministic)
}
func (m *Namespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Namespace.Merge(m, src)
}
func (m *Namespace) XXX_Size() int {
	return xxx_messageInfo_Namespace.Size(m)
}
func (m *Namespace) XXX_DiscardUnknown() {
	xxx_messageInfo_Namespace.DiscardUnknown(m)
}

var xxx_messageInfo_Namespace proto.InternalMessageInfo

func (m *Namespace) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *Namespace) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

// The full resource path e.g. ["devices", "chic-cr5", "interfaces", "1/1/1"]
type Resource struct {
	Path                 []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{3}
}

func (m *Resource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resource.Unmarshal(m, b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return xxx_messageInfo_Resource.Size(m)
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func (m *Resource) GetPath() []string {
	if m != nil {
		return m.Path
	}
	return nil
}

type TileRequest struct {
	// The namespace
	Namespace *Namespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The resource as a path
	Resource *Resource `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	// The metric to get the tile from, for example "traffic/in"
	Metric string `protobuf:"bytes,3,opt,name=metric,proto3" json:"metric,omitempty"`
	// The tile index, for example "1d-1234"
	Index                string   `protobuf:"bytes,4,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TileRequest) Reset()         { *m = TileRequest{} }
func (m *TileRequest) String() string { return proto.CompactTextString(m) }
func (*TileRequest) ProtoMessage()    {}
func (*TileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d69b4fdff410ff, []int{4}
}

func (m *TileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TileRequest.Unmarshal(m, b)
}
func (m *TileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TileRequest.Marshal(b, m, deterministic)
}
func (m *TileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TileRequest.Merge(m, src)
}
func (m *TileRequest) XXX_Size() int {
	return xxx_messageInfo_TileRequest.Size(m)
}
func (m *TileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TileRequest proto.InternalMessageInfo

func (m *TileRequest) GetNamespace() *Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *TileRequest) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *TileRequest) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *TileRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "netbeam.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "netbeam.HelloReply")
	proto.RegisterType((*Namespace)(nil), "netbeam.Namespace")
	proto.RegisterType((*Resource)(nil), "netbeam.Resource")
	proto.RegisterType((*TileRequest)(nil), "netbeam.TileRequest")
}

func init() { proto.RegisterFile("netbeam.proto", fileDescriptor_38d69b4fdff410ff) }

var fileDescriptor_38d69b4fdff410ff = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0xc1, 0x6e, 0xea, 0x30,
	0x10, 0x24, 0xc0, 0x03, 0xb2, 0xf0, 0xf4, 0x5e, 0x5d, 0x5a, 0x45, 0x1c, 0x10, 0x75, 0x0f, 0xe5,
	0xd2, 0xa4, 0xa2, 0xaa, 0xd4, 0x73, 0x0f, 0x55, 0x4f, 0x20, 0x05, 0x4e, 0xbd, 0x99, 0xb0, 0x0a,
	0x96, 0x62, 0x3b, 0x8d, 0x8d, 0x54, 0xf8, 0x96, 0x7e, 0x6c, 0x15, 0xe3, 0x04, 0xda, 0xdb, 0xce,
	0x64, 0xb2, 0xb3, 0xb3, 0x6b, 0xf8, 0x2b, 0xd1, 0xac, 0x91, 0x89, 0x30, 0x2f, 0x94, 0x51, 0xa4,
	0xeb, 0xe0, 0x08, 0x72, 0x25, 0x37, 0x47, 0x92, 0x52, 0x18, 0xbc, 0x61, 0x96, 0xa9, 0x18, 0x3f,
	0x76, 0xa8, 0x0d, 0x21, 0xd0, 0x96, 0x4c, 0x60, 0xe0, 0x4d, 0xbc, 0xa9, 0x1f, 0xdb, 0x9a, 0x2e,
	0x00, 0x9c, 0x26, 0xcf, 0xf6, 0x24, 0x80, 0xae, 0x40, 0xad, 0x59, 0x5a, 0x89, 0x2a, 0x48, 0xee,
	0xa0, 0x63, 0xb4, 0x61, 0x22, 0x0f, 0x9a, 0x13, 0x6f, 0xda, 0x9f, 0xfd, 0x0b, 0xad, 0xd1, 0x8a,
	0x0b, 0xb4, 0x74, 0xec, 0x3e, 0xd3, 0x05, 0xf8, 0x73, 0x26, 0x50, 0xe7, 0x2c, 0x41, 0x42, 0x61,
	0xa0, 0x8a, 0x94, 0x49, 0x7e, 0x60, 0x86, 0x2b, 0xe9, 0x9a, 0xfe, 0xe0, 0xc8, 0x18, 0x20, 0x51,
	0x59, 0x86, 0x89, 0x55, 0x34, 0xad, 0xe2, 0x8c, 0xa1, 0x63, 0xe8, 0xc5, 0xa8, 0xd5, 0xae, 0x48,
	0xb0, 0x4c, 0x90, 0x33, 0xb3, 0x0d, 0xbc, 0x49, 0xab, 0x4c, 0x50, 0xd6, 0xf4, 0xcb, 0x83, 0xfe,
	0x8a, 0x67, 0x58, 0xa5, 0x7c, 0x00, 0x5f, 0x56, 0x03, 0x58, 0xc3, 0xfe, 0x8c, 0x84, 0xd5, 0xb6,
	0xea, 0xd1, 0xe2, 0x93, 0x88, 0xdc, 0x43, 0xaf, 0x70, 0x0e, 0x2e, 0xdd, 0x45, 0xfd, 0x43, 0x65,
	0x1d, 0xd7, 0x12, 0x72, 0x0d, 0x1d, 0x81, 0xa6, 0xe0, 0x49, 0xd0, 0xb2, 0xc3, 0x3a, 0x44, 0x86,
	0xf0, 0x87, 0xcb, 0x0d, 0x7e, 0x06, 0x6d, 0x4b, 0x1f, 0xc1, 0xec, 0x00, 0xdd, 0xf9, 0xb1, 0x17,
	0x79, 0x86, 0xde, 0x92, 0xed, 0xed, 0xba, 0xc9, 0x55, 0xed, 0x70, 0x7e, 0xa2, 0xd1, 0xe5, 0x6f,
	0x3a, 0xcf, 0xf6, 0xb4, 0x41, 0x9e, 0xc0, 0x7f, 0x45, 0x93, 0x6c, 0xcb, 0x9c, 0x64, 0x58, 0x6b,
	0xce, 0x62, 0x8f, 0xfe, 0x9f, 0x0e, 0xb2, 0xc4, 0x82, 0xa3, 0xa6, 0x8d, 0x97, 0xdb, 0xf7, 0x9b,
	0x94, 0x9b, 0xed, 0x6e, 0x1d, 0x26, 0x4a, 0x44, 0xa8, 0x25, 0x9a, 0xc8, 0x3e, 0x8d, 0x28, 0x55,
	0x91, 0x6b, 0xb2, 0xee, 0x58, 0xe6, 0xf1, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x8b, 0x07, 0x01,
	0x52, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetbeamClient is the client API for Netbeam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetbeamClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// Requests a tile from the netbeam core for a specific metric
	FetchTile(ctx context.Context, in *TileRequest, opts ...grpc.CallOption) (*pond.TimeSeries, error)
}

type netbeamClient struct {
	cc *grpc.ClientConn
}

func NewNetbeamClient(cc *grpc.ClientConn) NetbeamClient {
	return &netbeamClient{cc}
}

func (c *netbeamClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/netbeam.Netbeam/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netbeamClient) FetchTile(ctx context.Context, in *TileRequest, opts ...grpc.CallOption) (*pond.TimeSeries, error) {
	out := new(pond.TimeSeries)
	err := c.cc.Invoke(ctx, "/netbeam.Netbeam/FetchTile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetbeamServer is the server API for Netbeam service.
type NetbeamServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	// Requests a tile from the netbeam core for a specific metric
	FetchTile(context.Context, *TileRequest) (*pond.TimeSeries, error)
}

// UnimplementedNetbeamServer can be embedded to have forward compatible implementations.
type UnimplementedNetbeamServer struct {
}

func (*UnimplementedNetbeamServer) SayHello(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedNetbeamServer) FetchTile(ctx context.Context, req *TileRequest) (*pond.TimeSeries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTile not implemented")
}

func RegisterNetbeamServer(s *grpc.Server, srv NetbeamServer) {
	s.RegisterService(&_Netbeam_serviceDesc, srv)
}

func _Netbeam_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetbeamServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netbeam.Netbeam/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetbeamServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Netbeam_FetchTile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetbeamServer).FetchTile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netbeam.Netbeam/FetchTile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetbeamServer).FetchTile(ctx, req.(*TileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Netbeam_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netbeam.Netbeam",
	HandlerType: (*NetbeamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Netbeam_SayHello_Handler,
		},
		{
			MethodName: "FetchTile",
			Handler:    _Netbeam_FetchTile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "netbeam.proto",
}
